{"mappings":"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","sources":["node_modules/@vaadin/router/src/utils.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-3ed73b9170169904.js","node_modules/@parcel/runtime-js/lib/runtime-2b745f4b48edd1b6.js","node_modules/@parcel/runtime-js/lib/runtime-603adccf34632bd4.js","node_modules/@parcel/runtime-js/lib/runtime-8259c843d20dbe2e.js","node_modules/@parcel/runtime-js/lib/runtime-f95d2063b5545230.js","node_modules/@parcel/runtime-js/lib/runtime-3c30b7cceb29a308.js","node_modules/@parcel/runtime-js/lib/runtime-e4aac62035992078.js","node_modules/@vaadin/router/src/triggers/click.js","node_modules/@vaadin/router/src/triggers/popstate.js","node_modules/@vaadin/router/node_modules/path-to-regexp/index.js","node_modules/@vaadin/router/src/resolver/matchPath.js","node_modules/@vaadin/router/src/resolver/matchRoute.js","node_modules/@vaadin/router/src/resolver/resolveRoute.js","node_modules/@vaadin/router/src/resolver/resolver.js","node_modules/@vaadin/router/src/resolver/generateUrls.js","node_modules/@vaadin/router/src/triggers/setNavigationTriggers.js","node_modules/@vaadin/router/src/transitions/animate.js","node_modules/@vaadin/router/src/router.js","node_modules/@vaadin/router/node_modules/@vaadin/vaadin-development-mode-detector/vaadin-development-mode-detector.js","node_modules/@vaadin/router/node_modules/@vaadin/vaadin-usage-statistics/vaadin-usage-statistics-collect.js","node_modules/@vaadin/router/src/router-meta.js","node_modules/@vaadin/router/src/router-config.js","client/src/router.ts","client/src/pages/home-page/homePage.ts","node_modules/@firebase/util/src/crypt.ts","node_modules/@firebase/util/src/deepCopy.ts","node_modules/@firebase/util/src/deferred.ts","node_modules/@firebase/util/src/emulator.ts","node_modules/@firebase/util/src/environment.ts","node_modules/@firebase/util/src/errors.ts","node_modules/@firebase/util/src/json.ts","node_modules/@firebase/util/src/jwt.ts","node_modules/@firebase/util/src/query.ts","node_modules/@firebase/util/src/sha1.ts","node_modules/@firebase/util/src/subscribe.ts","node_modules/@firebase/util/src/validation.ts","node_modules/@firebase/util/src/utf8.ts","node_modules/@firebase/util/src/exponential_backoff.ts","node_modules/@firebase/util/src/formatters.ts","node_modules/@firebase/util/src/compat.ts","node_modules/@firebase/component/src/component.ts","node_modules/@firebase/component/src/constants.ts","node_modules/@firebase/component/src/provider.ts","node_modules/@firebase/component/src/component_container.ts","node_modules/@firebase/logger/src/logger.ts","node_modules/idb/build/wrap-idb-value.js","node_modules/idb/build/index.js","node_modules/@firebase/app/src/platformLoggerService.ts","node_modules/@firebase/app/src/constants.ts","node_modules/@firebase/app/src/internal.ts","node_modules/@firebase/app/src/errors.ts","node_modules/@firebase/app/src/firebaseApp.ts","node_modules/@firebase/app/src/api.ts","node_modules/@firebase/app/src/indexeddb.ts","node_modules/@firebase/app/src/heartbeatService.ts","node_modules/process/browser.js","node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","node_modules/@firebase/database/src/core/storage/storage.ts","node_modules/@firebase/database/src/core/util/util.ts","node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","node_modules/@firebase/database/src/core/AuthTokenProvider.ts","node_modules/@firebase/database/src/core/RepoInfo.ts","node_modules/@firebase/database/src/core/stats/StatsManager.ts","node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","node_modules/@firebase/database/src/realtime/Constants.ts","node_modules/@firebase/database/src/realtime/TransportManager.ts","node_modules/@firebase/database/src/realtime/Connection.ts","node_modules/@firebase/database/src/core/ServerActions.ts","node_modules/@firebase/database/src/core/util/EventEmitter.ts","node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","node_modules/@firebase/database/src/core/util/Path.ts","node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","node_modules/@firebase/database/src/core/PersistentConnection.ts","node_modules/@firebase/database/src/core/snap/Node.ts","node_modules/@firebase/database/src/core/snap/indexes/Index.ts","node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","node_modules/@firebase/database/src/core/util/SortedMap.ts","node_modules/@firebase/database/src/core/snap/comparators.ts","node_modules/@firebase/database/src/core/snap/snap.ts","node_modules/@firebase/database/src/core/snap/LeafNode.ts","node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","node_modules/@firebase/database/src/core/snap/childSet.ts","node_modules/@firebase/database/src/core/snap/IndexMap.ts","node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","node_modules/@firebase/database/src/core/util/NextPushId.ts","node_modules/@firebase/database/src/core/view/Change.ts","node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","node_modules/@firebase/database/src/core/view/QueryParams.ts","node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","node_modules/@firebase/database/src/core/SnapshotHolder.ts","node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","node_modules/@firebase/database/src/core/stats/StatsListener.ts","node_modules/@firebase/database/src/core/stats/StatsReporter.ts","node_modules/@firebase/database/src/core/operation/Operation.ts","node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","node_modules/@firebase/database/src/core/operation/ListenComplete.ts","node_modules/@firebase/database/src/core/operation/Overwrite.ts","node_modules/@firebase/database/src/core/operation/Merge.ts","node_modules/@firebase/database/src/core/view/CacheNode.ts","node_modules/@firebase/database/src/core/view/EventGenerator.ts","node_modules/@firebase/database/src/core/view/ViewCache.ts","node_modules/@firebase/database/src/core/util/ImmutableTree.ts","node_modules/@firebase/database/src/core/CompoundWrite.ts","node_modules/@firebase/database/src/core/WriteTree.ts","node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","node_modules/@firebase/database/src/core/view/ViewProcessor.ts","node_modules/@firebase/database/src/core/view/View.ts","node_modules/@firebase/database/src/core/SyncPoint.ts","node_modules/@firebase/database/src/core/SyncTree.ts","node_modules/@firebase/database/src/core/util/ServerValues.ts","node_modules/@firebase/database/src/core/util/Tree.ts","node_modules/@firebase/database/src/core/util/validation.ts","node_modules/@firebase/database/src/core/view/EventQueue.ts","node_modules/@firebase/database/src/core/Repo.ts","node_modules/@firebase/database/src/core/util/libs/parser.ts","node_modules/@firebase/database/src/api/OnDisconnect.ts","node_modules/@firebase/database/src/api/Reference_impl.ts","node_modules/@firebase/database/src/core/view/Event.ts","node_modules/@firebase/database/src/core/view/EventRegistration.ts","node_modules/@firebase/database/src/api/Database.ts","node_modules/@firebase/database/src/api/Transaction.ts","node_modules/@firebase/database/src/api/test_access.ts","node_modules/@firebase/database/src/index.ts","node_modules/@firebase/database/src/core/stats/StatsCollection.ts","node_modules/@firebase/database/src/api/ServerValue.ts","node_modules/@firebase/database/src/register.ts","client/src/rtdb.ts","client/src/state.ts","client/src/pages/access-page/accessPage.ts","client/src/pages/game-room/gameRoomPage.ts","client/src/pages/choose-room/chooseRoomPage.ts","client/src/pages/instructions-page/instructionsPage.ts","client/src/pages/comparition-page/comparitionPage.ts","client/src/pages/waitingPage/waitingPage.ts","client/src/pages/result-page/resultPage.ts","client/src/pages/path-page/index.ts","client/src/components/customText.ts","client/src/components/button.ts","client/src/components/showName.ts","client/src/components/roomCode.ts","client/src/components/marcador.ts","client/src/components/shareCodeMessage.ts","client/src/components/game-option.ts","client/src/components/contador.ts","client/src/components/muestraJugada.ts","client/src/components/scoreComp.ts","client/src/components/starComp.ts","client/src/components/welcome-form/index.ts","client/src/components/questionary/index.ts","client/src/components/replay/index.ts","client/src/index.ts"],"sourcesContent":["export function toArray(objectOrArray) {\n  objectOrArray = objectOrArray || [];\n  return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];\n}\n\nexport function log(msg) {\n  return `[Vaadin.Router] ${msg}`;\n}\n\nexport function logValue(value) {\n  if (typeof value !== 'object') {\n    return String(value);\n  }\n\n  const stringType = Object.prototype.toString.call(value).match(/ (.*)\\]$/)[1];\n  if (stringType === 'Object' || stringType === 'Array') {\n    return `${stringType} ${JSON.stringify(value)}`;\n  } else {\n    return stringType;\n  }\n}\n\nconst MODULE = 'module';\nconst NOMODULE = 'nomodule';\nconst bundleKeys = [MODULE, NOMODULE];\n\nfunction ensureBundle(src) {\n  if (!src.match(/.+\\.[m]?js$/)) {\n    throw new Error(\n      log(`Unsupported type for bundle \"${src}\": .js or .mjs expected.`)\n    );\n  }\n}\n\nexport function ensureRoute(route) {\n  if (!route || !isString(route.path)) {\n    throw new Error(\n      log(`Expected route config to be an object with a \"path\" string property, or an array of such objects`)\n    );\n  }\n\n  const bundle = route.bundle;\n\n  const stringKeys = ['component', 'redirect', 'bundle'];\n  if (\n    !isFunction(route.action) &&\n    !Array.isArray(route.children) &&\n    !isFunction(route.children) &&\n    !isObject(bundle) &&\n    !stringKeys.some(key => isString(route[key]))\n  ) {\n    throw new Error(\n      log(\n        `Expected route config \"${route.path}\" to include either \"${stringKeys.join('\", \"')}\" ` +\n        `or \"action\" function but none found.`\n      )\n    );\n  }\n\n  if (bundle) {\n    if (isString(bundle)) {\n      ensureBundle(bundle);\n    } else if (!bundleKeys.some(key => key in bundle)) {\n      throw new Error(\n        log('Expected route bundle to include either \"' + NOMODULE + '\" or \"' + MODULE + '\" keys, or both')\n      );\n    } else {\n      bundleKeys.forEach(key => key in bundle && ensureBundle(bundle[key]));\n    }\n  }\n\n  if (route.redirect) {\n    ['bundle', 'component'].forEach(overriddenProp => {\n      if (overriddenProp in route) {\n        console.warn(\n          log(\n            `Route config \"${route.path}\" has both \"redirect\" and \"${overriddenProp}\" properties, ` +\n            `and \"redirect\" will always override the latter. Did you mean to only use \"${overriddenProp}\"?`\n          )\n        );\n      }\n    });\n  }\n}\n\nexport function ensureRoutes(routes) {\n  toArray(routes).forEach(route => ensureRoute(route));\n}\n\nfunction loadScript(src, key) {\n  let script = document.head.querySelector('script[src=\"' + src + '\"][async]');\n  if (!script) {\n    script = document.createElement('script');\n    script.setAttribute('src', src);\n    if (key === MODULE) {\n      script.setAttribute('type', MODULE);\n    } else if (key === NOMODULE) {\n      script.setAttribute(NOMODULE, '');\n    }\n    script.async = true;\n  }\n  return new Promise((resolve, reject) => {\n    script.onreadystatechange = script.onload = e => {\n      script.__dynamicImportLoaded = true;\n      resolve(e);\n    };\n    script.onerror = e => {\n      if (script.parentNode) {\n        script.parentNode.removeChild(script);\n      }\n      reject(e);\n    };\n    if (script.parentNode === null) {\n      document.head.appendChild(script);\n    } else if (script.__dynamicImportLoaded) {\n      resolve();\n    }\n  });\n}\n\nexport function loadBundle(bundle) {\n  if (isString(bundle)) {\n    return loadScript(bundle);\n  } else {\n    return Promise.race(\n      bundleKeys\n        .filter(key => key in bundle)\n        .map(key => loadScript(bundle[key], key))\n    );\n  }\n}\n\nexport function fireRouterEvent(type, detail) {\n  return !window.dispatchEvent(new CustomEvent(\n    `vaadin-router-${type}`,\n    {cancelable: type === 'go', detail}\n  ));\n}\n\nexport function isObject(o) {\n  // guard against null passing the typeof check\n  return typeof o === 'object' && !!o;\n}\n\nexport function isFunction(f) {\n  return typeof f === 'function';\n}\n\nexport function isString(s) {\n  return typeof s === 'string';\n}\n\nexport function getNotFoundError(context) {\n  const error = new Error(log(`Page not found (${context.pathname})`));\n  error.context = context;\n  error.code = 404;\n  return error;\n}\n\nexport const notFoundResult = new (class NotFoundResult {})();\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"ezCGa\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"gzxIO\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"hRxV9\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"ker4v\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"56OK1\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"2E5ap\")).toString();","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"eHDun\\\":\\\"index.3e02a305.js\\\",\\\"ezCGa\\\":\\\"tijera.6a2fdda1.svg\\\",\\\"gzxIO\\\":\\\"papel.5f79bbf0.svg\\\",\\\"hRxV9\\\":\\\"piedra.c88f7ccf.svg\\\",\\\"ker4v\\\":\\\"ganaste.a5669fde.svg\\\",\\\"56OK1\\\":\\\"perdiste.9846907e.svg\\\",\\\"2E5ap\\\":\\\"empataste.e1be417e.svg\\\"}\"));","import {fireRouterEvent} from '../utils.js';\n\n/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */\nfunction getAnchorOrigin(anchor) {\n  // IE11: on HTTP and HTTPS the default port is not included into\n  // window.location.origin, so won't include it here either.\n  const port = anchor.port;\n  const protocol = anchor.protocol;\n  const defaultHttp = protocol === 'http:' && port === '80';\n  const defaultHttps = protocol === 'https:' && port === '443';\n  const host = (defaultHttp || defaultHttps)\n    ? anchor.hostname // does not include the port number (e.g. www.example.org)\n    : anchor.host; // does include the port number (e.g. www.example.org:80)\n  return `${protocol}//${host}`;\n}\n\n// The list of checks is not complete:\n//  - SVG support is missing\n//  - the 'rel' attribute is not considered\nfunction vaadinRouterGlobalClickHandler(event) {\n  // ignore the click if the default action is prevented\n  if (event.defaultPrevented) {\n    return;\n  }\n\n  // ignore the click if not with the primary mouse button\n  if (event.button !== 0) {\n    return;\n  }\n\n  // ignore the click if a modifier key is pressed\n  if (event.shiftKey || event.ctrlKey || event.altKey || event.metaKey) {\n    return;\n  }\n\n  // find the <a> element that the click is at (or within)\n  let anchor = event.target;\n  const path = event.composedPath\n    ? event.composedPath()\n    : (event.path || []);\n\n  // FIXME(web-padawan): `Symbol.iterator` used by webcomponentsjs is broken for arrays\n  // example to check: `for...of` loop here throws the \"Not yet implemented\" error\n  for (let i = 0; i < path.length; i++) {\n    const target = path[i];\n    if (target.nodeName && target.nodeName.toLowerCase() === 'a') {\n      anchor = target;\n      break;\n    }\n  }\n\n  while (anchor && anchor.nodeName.toLowerCase() !== 'a') {\n    anchor = anchor.parentNode;\n  }\n\n  // ignore the click if not at an <a> element\n  if (!anchor || anchor.nodeName.toLowerCase() !== 'a') {\n    return;\n  }\n\n  // ignore the click if the <a> element has a non-default target\n  if (anchor.target && anchor.target.toLowerCase() !== '_self') {\n    return;\n  }\n\n  // ignore the click if the <a> element has the 'download' attribute\n  if (anchor.hasAttribute('download')) {\n    return;\n  }\n\n  // ignore the click if the <a> element has the 'router-ignore' attribute\n  if (anchor.hasAttribute('router-ignore')) {\n    return;\n  }\n\n  // ignore the click if the target URL is a fragment on the current page\n  if (anchor.pathname === window.location.pathname && anchor.hash !== '') {\n    return;\n  }\n\n  // ignore the click if the target is external to the app\n  // In IE11 HTMLAnchorElement does not have the `origin` property\n  const origin = anchor.origin || getAnchorOrigin(anchor);\n  if (origin !== window.location.origin) {\n    return;\n  }\n\n  // if none of the above, convert the click into a navigation event\n  const {pathname, search, hash} = anchor;\n  if (fireRouterEvent('go', {pathname, search, hash})) {\n    event.preventDefault();\n    // for a click event, the scroll is reset to the top position.\n    if (event && event.type === 'click') {\n      window.scrollTo(0, 0);\n    }\n  }\n}\n\n/**\n * A navigation trigger for Vaadin Router that translated clicks on `<a>` links\n * into Vaadin Router navigation events.\n *\n * Only regular clicks on in-app links are translated (primary mouse button, no\n * modifier keys, the target href is within the app's URL space).\n *\n * @memberOf Router.NavigationTrigger\n * @type {NavigationTrigger}\n */\nconst CLICK = {\n  activate() {\n    window.document.addEventListener('click', vaadinRouterGlobalClickHandler);\n  },\n\n  inactivate() {\n    window.document.removeEventListener('click', vaadinRouterGlobalClickHandler);\n  }\n};\n\nexport default CLICK;\n","import {fireRouterEvent, isFunction} from '../utils.js';\n\n// PopStateEvent constructor shim\nconst isIE = /Trident/.test(navigator.userAgent);\n\n/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */\nif (isIE && !isFunction(window.PopStateEvent)) {\n  window.PopStateEvent = function(inType, params) {\n    params = params || {};\n    var e = document.createEvent('Event');\n    e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));\n    e.state = params.state || null;\n    return e;\n  };\n  window.PopStateEvent.prototype = window.Event.prototype;\n}\n\nfunction vaadinRouterGlobalPopstateHandler(event) {\n  if (event.state === 'vaadin-router-ignore') {\n    return;\n  }\n  const {pathname, search, hash} = window.location;\n  fireRouterEvent('go', {pathname, search, hash});\n}\n\n/**\n * A navigation trigger for Vaadin Router that translates popstate events into\n * Vaadin Router navigation events.\n *\n * @memberOf Router.NavigationTrigger\n * @type {NavigationTrigger}\n */\nconst POPSTATE = {\n  activate() {\n    window.addEventListener('popstate', vaadinRouterGlobalPopstateHandler);\n  },\n\n  inactivate() {\n    window.removeEventListener('popstate', vaadinRouterGlobalPopstateHandler);\n  }\n};\n\nexport default POPSTATE;\n","/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n  var isEndDelimited = tokens.length === 0\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from './path-to-regexp.js';\n\nconst {hasOwnProperty} = Object.prototype;\nconst cache = new Map();\n// see https://github.com/pillarjs/path-to-regexp/issues/148\ncache.set('|false', {\n  keys: [],\n  pattern: /(?:)/\n});\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val);\n  } catch (err) {\n    return val;\n  }\n}\n\nfunction matchPath(routepath, path, exact, parentKeys, parentParams) {\n  exact = !!exact;\n  const cacheKey = `${routepath}|${exact}`;\n  let regexp = cache.get(cacheKey);\n\n  if (!regexp) {\n    const keys = [];\n    regexp = {\n      keys,\n      pattern: pathToRegexp(routepath, keys, {\n        end: exact,\n        strict: routepath === ''\n      }),\n    };\n    cache.set(cacheKey, regexp);\n  }\n\n  const m = regexp.pattern.exec(path);\n  if (!m) {\n    return null;\n  }\n\n  const params = Object.assign({}, parentParams);\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1];\n    const prop = key.name;\n    const value = m[i];\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : [];\n      } else {\n        params[prop] = value ? decodeParam(value) : value;\n      }\n    }\n  }\n\n  return {\n    path: m[0],\n    keys: (parentKeys || []).concat(regexp.keys),\n    params,\n  };\n}\n\nexport default matchPath;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath.js';\n\n/**\n * Traverses the routes tree and matches its nodes to the given pathname from\n * the root down to the leaves. Each match consumes a part of the pathname and\n * the matching process continues for as long as there is a matching child\n * route for the remaining part of the pathname.\n *\n * The returned value is a lazily evaluated iterator.\n *\n * The leading \"/\" in a route path matters only for the root of the routes\n * tree (or if all parent routes are \"\"). In all other cases a leading \"/\" in\n * a child route path has no significance.\n *\n * The trailing \"/\" in a _route path_ matters only for the leaves of the\n * routes tree. A leaf route with a trailing \"/\" matches only a pathname that\n * also has a trailing \"/\".\n *\n * The trailing \"/\" in a route path does not affect matching of child routes\n * in any way.\n *\n * The trailing \"/\" in a _pathname_ generally does not matter (except for\n * the case of leaf nodes described above).\n *\n * The \"\" and \"/\" routes have special treatment:\n *  1. as a single route\n *     the \"\" and \"/\" routes match only the \"\" and \"/\" pathnames respectively\n *  2. as a parent in the routes tree\n *     the \"\" route matches any pathname without consuming any part of it\n *     the \"/\" route matches any absolute pathname consuming its leading \"/\"\n *  3. as a leaf in the routes tree\n *     the \"\" and \"/\" routes match only if the entire pathname is consumed by\n *         the parent routes chain. In this case \"\" and \"/\" are equivalent.\n *  4. several directly nested \"\" or \"/\" routes\n *     - directly nested \"\" or \"/\" routes are 'squashed' (i.e. nesting two\n *       \"/\" routes does not require a double \"/\" in the pathname to match)\n *     - if there are only \"\" in the parent routes chain, no part of the\n *       pathname is consumed, and the leading \"/\" in the child routes' paths\n *       remains significant\n *\n * Side effect:\n *   - the routes tree { path: '' } matches only the '' pathname\n *   - the routes tree { path: '', children: [ { path: '' } ] } matches any\n *     pathname (for the tree root)\n *\n * Prefix matching can be enabled also by `children: true`.\n */\nfunction matchRoute(route, pathname, ignoreLeadingSlash, parentKeys, parentParams) {\n  let match;\n  let childMatches;\n  let childIndex = 0;\n  let routepath = route.path || '';\n  if (routepath.charAt(0) === '/') {\n    if (ignoreLeadingSlash) {\n      routepath = routepath.substr(1);\n    }\n    ignoreLeadingSlash = true;\n  }\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return {done: true};\n      }\n\n      const children = route.__children = route.__children || route.children;\n\n      if (!match) {\n        match = matchPath(routepath, pathname, !children, parentKeys, parentParams);\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              keys: match.keys,\n              params: match.params,\n              path: match.path\n            },\n          };\n        }\n      }\n\n      if (match && children) {\n        while (childIndex < children.length) {\n          if (!childMatches) {\n            const childRoute = children[childIndex];\n            childRoute.parent = route;\n\n            let matchedLength = match.path.length;\n            if (matchedLength > 0 && pathname.charAt(matchedLength) === '/') {\n              matchedLength += 1;\n            }\n\n            childMatches = matchRoute(\n              childRoute,\n              pathname.substr(matchedLength),\n              ignoreLeadingSlash,\n              match.keys,\n              match.params\n            );\n          }\n\n          const childMatch = childMatches.next(routeToSkip);\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            };\n          }\n\n          childMatches = null;\n          childIndex++;\n        }\n      }\n\n      return {done: true};\n    },\n  };\n}\n\nexport default matchRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport {isFunction} from '../utils.js';\n\nfunction resolveRoute(context) {\n  if (isFunction(context.route.action)) {\n    return context.route.action(context);\n  }\n  return undefined;\n}\n\nexport default resolveRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from './path-to-regexp.js';\nimport matchRoute from './matchRoute.js';\nimport resolveRoute from './resolveRoute.js';\nimport {toArray, ensureRoutes, isString, getNotFoundError, notFoundResult} from '../utils.js';\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute;\n  while (route) {\n    route = route.parent;\n    if (route === parentRoute) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction generateErrorMessage(currentContext) {\n  let errorMessage = `Path '${currentContext.pathname}' is not properly resolved due to an error.`;\n  const routePath = (currentContext.route || {}).path;\n  if (routePath) {\n    errorMessage += ` Resolution had failed on route: '${routePath}'`;\n  }\n  return errorMessage;\n}\n\nfunction updateChainForRoute(context, match) {\n  const {route, path} = match;\n\n  if (route && !route.__synthetic) {\n    const item = {path, route};\n    if (!context.chain) {\n      context.chain = [];\n    } else {\n      // Discard old items\n      if (route.parent) {\n        let i = context.chain.length;\n        while (i-- && context.chain[i].route && context.chain[i].route !== route.parent) {\n          context.chain.pop();\n        }\n      }\n    }\n    context.chain.push(item);\n  }\n}\n\n/**\n */\nclass Resolver {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes');\n    }\n\n    this.baseUrl = options.baseUrl || '';\n    this.errorHandler = options.errorHandler;\n    this.resolveRoute = options.resolveRoute || resolveRoute;\n    this.context = Object.assign({resolver: this}, options.context);\n    this.root = Array.isArray(routes) ? {path: '', __children: routes, parent: null, __synthetic: true} : routes;\n    this.root.parent = null;\n  }\n\n  /**\n   * Returns the current list of routes (as a shallow copy). Adding / removing\n   * routes to / from the returned array does not affect the routing config,\n   * but modifying the route objects does.\n   *\n   * @return {!Array<!Router.Route>}\n   */\n  getRoutes() {\n    return [...this.root.__children];\n  }\n\n  /**\n   * Sets the routing config (replacing the existing one).\n   *\n   * @param {!Array<!Router.Route>|!Router.Route} routes a single route or an array of those\n   *    (the array is shallow copied)\n   */\n  setRoutes(routes) {\n    ensureRoutes(routes);\n    const newRoutes = [...toArray(routes)];\n    this.root.__children = newRoutes;\n  }\n\n  /**\n   * Appends one or several routes to the routing config and returns the\n   * effective routing config after the operation.\n   *\n   * @param {!Array<!Router.Route>|!Router.Route} routes a single route or an array of those\n   *    (the array is shallow copied)\n   * @return {!Array<!Router.Route>}\n   * @protected\n   */\n  addRoutes(routes) {\n    ensureRoutes(routes);\n    this.root.__children.push(...toArray(routes));\n    return this.getRoutes();\n  }\n\n  /**\n   * Removes all existing routes from the routing config.\n   */\n  removeRoutes() {\n    this.setRoutes([]);\n  }\n\n  /**\n   * Asynchronously resolves the given pathname, i.e. finds all routes matching\n   * the pathname and tries resolving them one after another in the order they\n   * are listed in the routes config until the first non-null result.\n   *\n   * Returns a promise that is fulfilled with the return value of an object that consists of the first\n   * route handler result that returns something other than `null` or `undefined` and context used to get this result.\n   *\n   * If no route handlers return a non-null result, or if no route matches the\n   * given pathname the returned promise is rejected with a 'page not found'\n   * `Error`.\n   *\n   * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to\n   *    resolve or a context object with a `pathname` property and other\n   *    properties to pass to the route resolver functions.\n   * @return {!Promise<any>}\n   */\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      isString(pathnameOrContext) ? {pathname: pathnameOrContext} : pathnameOrContext\n    );\n    const match = matchRoute(\n      this.root,\n      this.__normalizePathname(context.pathname),\n      this.baseUrl\n    );\n    const resolve = this.resolveRoute;\n    let matches = null;\n    let nextMatches = null;\n    let currentContext = context;\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route;\n      matches = nextMatches || match.next(routeToSkip);\n      nextMatches = null;\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches;\n          return Promise.resolve(notFoundResult);\n        }\n      }\n\n      if (matches.done) {\n        return Promise.reject(getNotFoundError(context));\n      }\n\n      currentContext = Object.assign(\n        currentContext\n          ? {chain: (currentContext.chain ? currentContext.chain.slice(0) : [])}\n          : {},\n        context,\n        matches.value\n      );\n      updateChainForRoute(currentContext, matches.value);\n\n      return Promise.resolve(resolve(currentContext)).then(resolution => {\n        if (resolution !== null && resolution !== undefined && resolution !== notFoundResult) {\n          currentContext.result = resolution.result || resolution;\n          return currentContext;\n        }\n        return next(resume, parent, resolution);\n      });\n    }\n\n    context.next = next;\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        const errorMessage = generateErrorMessage(currentContext);\n        if (!error) {\n          error = new Error(errorMessage);\n        } else {\n          console.warn(errorMessage);\n        }\n        error.context = error.context || currentContext;\n        // DOMException has its own code which is read-only\n        if (!(error instanceof DOMException)) {\n          error.code = error.code || 500;\n        }\n        if (this.errorHandler) {\n          currentContext.result = this.errorHandler(error);\n          return currentContext;\n        }\n        throw error;\n      });\n  }\n\n  /**\n   * URL constructor polyfill hook. Creates and returns an URL instance.\n   */\n  static __createUrl(url, base) {\n    return new URL(url, base);\n  }\n\n  /**\n   * If the baseUrl property is set, transforms the baseUrl and returns the full\n   * actual `base` string for using in the `new URL(path, base);` and for\n   * prepernding the paths with. The returned base ends with a trailing slash.\n   *\n   * Otherwise, returns empty string.\n   */\n  get __effectiveBaseUrl() {\n    return this.baseUrl\n      ? this.constructor.__createUrl(\n        this.baseUrl,\n        document.baseURI || document.URL\n      ).href.replace(/[^\\/]*$/, '')\n      : '';\n  }\n\n  /**\n   * If the baseUrl is set, matches the pathname with the router’s baseUrl,\n   * and returns the local pathname with the baseUrl stripped out.\n   *\n   * If the pathname does not match the baseUrl, returns undefined.\n   *\n   * If the `baseUrl` is not set, returns the unmodified pathname argument.\n   */\n  __normalizePathname(pathname) {\n    if (!this.baseUrl) {\n      // No base URL, no need to transform the pathname.\n      return pathname;\n    }\n\n    const base = this.__effectiveBaseUrl;\n    const normalizedUrl = this.constructor.__createUrl(pathname, base).href;\n    if (normalizedUrl.slice(0, base.length) === base) {\n      return normalizedUrl.slice(base.length);\n    }\n  }\n}\n\nResolver.pathToRegexp = pathToRegexp;\n\nexport default Resolver;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport Resolver from './resolver.js';\nimport {isString} from '../utils.js';\n\nconst {pathToRegexp} = Resolver;\nconst cache = new Map();\n\nfunction cacheRoutes(routesByName, route, routes) {\n  const name = route.name || route.component;\n  if (name) {\n    if (routesByName.has(name)) {\n      routesByName.get(name).push(route);\n    } else {\n      routesByName.set(name, [route]);\n    }\n  }\n\n  if (Array.isArray(routes)) {\n    for (let i = 0; i < routes.length; i++) {\n      const childRoute = routes[i];\n      childRoute.parent = route;\n      cacheRoutes(routesByName, childRoute, childRoute.__children || childRoute.children);\n    }\n  }\n}\n\nfunction getRouteByName(routesByName, routeName) {\n  const routes = routesByName.get(routeName);\n  if (routes && routes.length > 1) {\n    throw new Error(\n      `Duplicate route with name \"${routeName}\".`\n      + ` Try seting unique 'name' route properties.`\n    );\n  }\n  return routes && routes[0];\n}\n\nfunction getRoutePath(route) {\n  let path = route.path;\n  path = Array.isArray(path) ? path[0] : path;\n  return path !== undefined ? path : '';\n}\n\nfunction generateUrls(router, options = {}) {\n  if (!(router instanceof Resolver)) {\n    throw new TypeError('An instance of Resolver is expected');\n  }\n\n  const routesByName = new Map();\n\n  return (routeName, params) => {\n    let route = getRouteByName(routesByName, routeName);\n    if (!route) {\n      routesByName.clear(); // clear cache\n      cacheRoutes(routesByName, router.root, router.root.__children);\n\n      route = getRouteByName(routesByName, routeName);\n      if (!route) {\n        throw new Error(`Route \"${routeName}\" not found`);\n      }\n    }\n\n    let regexp = cache.get(route.fullPath);\n    if (!regexp) {\n      let fullPath = getRoutePath(route);\n      let rt = route.parent;\n      while (rt) {\n        const path = getRoutePath(rt);\n        if (path) {\n          fullPath = path.replace(/\\/$/, '') + '/' + fullPath.replace(/^\\//, '');\n        }\n        rt = rt.parent;\n      }\n      const tokens = pathToRegexp.parse(fullPath);\n      const toPath = pathToRegexp.tokensToFunction(tokens);\n      const keys = Object.create(null);\n      for (let i = 0; i < tokens.length; i++) {\n        if (!isString(tokens[i])) {\n          keys[tokens[i].name] = true;\n        }\n      }\n      regexp = {toPath, keys};\n      cache.set(fullPath, regexp);\n      route.fullPath = fullPath;\n    }\n\n    let url = regexp.toPath(params, options) || '/';\n\n    if (options.stringifyQueryParams && params) {\n      const queryParams = {};\n      const keys = Object.keys(params);\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (!regexp.keys[key]) {\n          queryParams[key] = params[key];\n        }\n      }\n      const query = options.stringifyQueryParams(queryParams);\n      if (query) {\n        url += query.charAt(0) === '?' ? query : `?${query}`;\n      }\n    }\n\n    return url;\n  };\n}\n\nexport default generateUrls;\n","/**\n * @typedef NavigationTrigger\n * @type {object}\n * @property {function()} activate\n * @property {function()} inactivate\n */\n\n/** @type {Array<NavigationTrigger>} */\nlet triggers = [];\n\nexport default function setNavigationTriggers(newTriggers) {\n  triggers.forEach(trigger => trigger.inactivate());\n\n  newTriggers.forEach(trigger => trigger.activate());\n\n  triggers = newTriggers;\n}\n","const willAnimate = elem => {\n  const name = getComputedStyle(elem).getPropertyValue('animation-name');\n  return name && name !== 'none';\n};\n\nconst waitForAnimation = (elem, cb) => {\n  const listener = () => {\n    elem.removeEventListener('animationend', listener);\n    cb();\n  };\n  elem.addEventListener('animationend', listener);\n};\n\nfunction animate(elem, className) {\n  elem.classList.add(className);\n\n  return new Promise(resolve => {\n    if (willAnimate(elem)) {\n      const rect = elem.getBoundingClientRect();\n      const size = `height: ${rect.bottom - rect.top}px; width: ${rect.right - rect.left}px`;\n      elem.setAttribute('style', `position: absolute; ${size}`);\n      waitForAnimation(elem, () => {\n        elem.classList.remove(className);\n        elem.removeAttribute('style');\n        resolve();\n      });\n    } else {\n      elem.classList.remove(className);\n      resolve();\n    }\n  });\n}\n\nexport default animate;\n","import Resolver from './resolver/resolver.js';\nimport generateUrls from './resolver/generateUrls.js';\nimport setNavigationTriggers from './triggers/setNavigationTriggers.js';\nimport animate from './transitions/animate.js';\nimport {\n  ensureRoute,\n  fireRouterEvent,\n  loadBundle,\n  log,\n  logValue,\n  toArray,\n  isFunction,\n  isString,\n  isObject,\n  getNotFoundError,\n  notFoundResult\n} from './utils.js';\n\nconst MAX_REDIRECT_COUNT = 256;\n\nfunction isResultNotEmpty(result) {\n  return result !== null && result !== undefined;\n}\n\nfunction copyContextWithoutNext(context) {\n  const copy = Object.assign({}, context);\n  delete copy.next;\n  return copy;\n}\n\nfunction createLocation({pathname = '', search = '', hash = '', chain = [], params = {}, redirectFrom, resolver}, route) {\n  const routes = chain.map(item => item.route);\n  return {\n    baseUrl: resolver && resolver.baseUrl || '',\n    pathname,\n    search,\n    hash,\n    routes,\n    route: route || routes.length && routes[routes.length - 1] || null,\n    params,\n    redirectFrom,\n    getUrl: (userParams = {}) => getPathnameForRouter(\n      Router.pathToRegexp.compile(\n        getMatchedPath(routes)\n      )(Object.assign({}, params, userParams)),\n      resolver\n    )\n  };\n}\n\nfunction createRedirect(context, pathname) {\n  const params = Object.assign({}, context.params);\n  return {\n    redirect: {\n      pathname,\n      from: context.pathname,\n      params\n    }\n  };\n}\n\nfunction renderElement(context, element) {\n  element.location = createLocation(context);\n  const index = context.chain.map(item => item.route).indexOf(context.route);\n  context.chain[index].element = element;\n  return element;\n}\n\nfunction runCallbackIfPossible(callback, args, thisArg) {\n  if (isFunction(callback)) {\n    return callback.apply(thisArg, args);\n  }\n}\n\nfunction amend(amendmentFunction, args, element) {\n  return amendmentResult => {\n    if (amendmentResult && (amendmentResult.cancel || amendmentResult.redirect)) {\n      return amendmentResult;\n    }\n\n    if (element) {\n      return runCallbackIfPossible(element[amendmentFunction], args, element);\n    }\n  };\n}\n\nfunction processNewChildren(newChildren, route) {\n  if (!Array.isArray(newChildren) && !isObject(newChildren)) {\n    throw new Error(\n      log(\n        `Incorrect \"children\" value for the route ${route.path}: expected array or object, but got ${newChildren}`\n      )\n    );\n  }\n\n  route.__children = [];\n  const childRoutes = toArray(newChildren);\n  for (let i = 0; i < childRoutes.length; i++) {\n    ensureRoute(childRoutes[i]);\n    route.__children.push(childRoutes[i]);\n  }\n}\n\nfunction removeDomNodes(nodes) {\n  if (nodes && nodes.length) {\n    const parent = nodes[0].parentNode;\n    for (let i = 0; i < nodes.length; i++) {\n      parent.removeChild(nodes[i]);\n    }\n  }\n}\n\nfunction getPathnameForRouter(pathname, router) {\n  const base = router.__effectiveBaseUrl;\n  return base\n    ? router.constructor.__createUrl(pathname.replace(/^\\//, ''), base).pathname\n    : pathname;\n}\n\nfunction getMatchedPath(chain) {\n  return chain.map(item => item.path).reduce((a, b) => {\n    if (b.length) {\n      return a.replace(/\\/$/, '') + '/' + b.replace(/^\\//, '');\n    }\n    return a;\n  }, '');\n}\n\n/**\n * A simple client-side router for single-page applications. It uses\n * express-style middleware and has a first-class support for Web Components and\n * lazy-loading. Works great in Polymer and non-Polymer apps.\n *\n * Use `new Router(outlet, options)` to create a new Router instance.\n *\n * * The `outlet` parameter is a reference to the DOM node to render\n *   the content into.\n *\n * * The `options` parameter is an optional object with options. The following\n *   keys are supported:\n *   * `baseUrl` — the initial value for [\n *     the `baseUrl` property\n *   ](#/classes/Router#property-baseUrl)\n *\n * The Router instance is automatically subscribed to navigation events\n * on `window`.\n *\n * See [Live Examples](#/classes/Router/demos/demo/index.html) for the detailed usage demo and code snippets.\n *\n * See also detailed API docs for the following methods, for the advanced usage:\n *\n * * [setOutlet](#/classes/Router#method-setOutlet) – should be used to configure the outlet.\n * * [setTriggers](#/classes/Router#method-setTriggers) – should be used to configure the navigation events.\n * * [setRoutes](#/classes/Router#method-setRoutes) – should be used to configure the routes.\n *\n * Only `setRoutes` has to be called manually, others are automatically invoked when creating a new instance.\n *\n * @extends Resolver\n * @demo demo/index.html\n * @summary JavaScript class that renders different DOM content depending on\n *    a given path. It can re-render when triggered or automatically on\n *    'popstate' and / or 'click' events.\n */\nexport class Router extends Resolver {\n\n  /**\n   * Creates a new Router instance with a given outlet, and\n   * automatically subscribes it to navigation events on the `window`.\n   * Using a constructor argument or a setter for outlet is equivalent:\n   *\n   * ```\n   * const router = new Router();\n   * router.setOutlet(outlet);\n   * ```\n   * @param {?Node=} outlet\n   * @param {?RouterOptions=} options\n   */\n  constructor(outlet, options) {\n    const baseElement = document.head.querySelector('base');\n    const baseHref = baseElement && baseElement.getAttribute('href');\n    super([], Object.assign({\n      // Default options\n      baseUrl: baseHref && Resolver.__createUrl(baseHref, document.URL).pathname.replace(/[^\\/]*$/, '')\n    }, options));\n\n    this.resolveRoute = context => this.__resolveRoute(context);\n\n    const triggers = Router.NavigationTrigger;\n    Router.setTriggers.apply(Router, Object.keys(triggers).map(key => triggers[key]));\n\n    /**\n     * The base URL for all routes in the router instance. By default,\n     * if the base element exists in the `<head>`, vaadin-router\n     * takes the `<base href>` attribute value, resolves against current `document.URL`\n     * and gets the `pathname` from the result.\n     *\n     * @public\n     * @type {string}\n     */\n    this.baseUrl;\n\n    /**\n     * A promise that is settled after the current render cycle completes. If\n     * there is no render cycle in progress the promise is immediately settled\n     * with the last render cycle result.\n     *\n     * @public\n     * @type {!Promise<!RouterLocation>}\n     */\n    this.ready;\n    this.ready = Promise.resolve(outlet);\n\n    /**\n     * Contains read-only information about the current router location:\n     * pathname, active routes, parameters. See the\n     * [Location type declaration](#/classes/RouterLocation)\n     * for more details.\n     *\n     * @public\n     * @type {!RouterLocation}\n     */\n    this.location;\n    this.location = createLocation({resolver: this});\n\n    this.__lastStartedRenderId = 0;\n    this.__navigationEventHandler = this.__onNavigationEvent.bind(this);\n    this.setOutlet(outlet);\n    this.subscribe();\n    // Using WeakMap instead of WeakSet because WeakSet is not supported by IE11\n    this.__createdByRouter = new WeakMap();\n    this.__addedByRouter = new WeakMap();\n  }\n\n  __resolveRoute(context) {\n    const route = context.route;\n\n    let callbacks = Promise.resolve();\n\n    if (isFunction(route.children)) {\n      callbacks = callbacks\n        .then(() => route.children(copyContextWithoutNext(context)))\n        .then(children => {\n          // The route.children() callback might have re-written the\n          // route.children property instead of returning a value\n          if (!isResultNotEmpty(children) && !isFunction(route.children)) {\n            children = route.children;\n          }\n          processNewChildren(children, route);\n        });\n    }\n\n    const commands = {\n      redirect: path => createRedirect(context, path),\n      component: (component) => {\n        const element = document.createElement(component);\n        this.__createdByRouter.set(element, true);\n        return element;\n      }\n    };\n\n    return callbacks\n      .then(() => {\n        if (this.__isLatestRender(context)) {\n          return runCallbackIfPossible(route.action, [context, commands], route);\n        }\n      })\n      .then(result => {\n        if (isResultNotEmpty(result)) {\n          // Actions like `() => import('my-view.js')` are not expected to\n          // end the resolution, despite the result is not empty. Checking\n          // the result with a whitelist of values that end the resolution.\n          if (result instanceof HTMLElement ||\n              result.redirect ||\n              result === notFoundResult) {\n            return result;\n          }\n        }\n\n        if (isString(route.redirect)) {\n          return commands.redirect(route.redirect);\n        }\n\n        if (route.bundle) {\n          return loadBundle(route.bundle)\n            .then(() => {}, () => {\n              throw new Error(log(`Bundle not found: ${route.bundle}. Check if the file name is correct`));\n            });\n        }\n      })\n      .then(result => {\n        if (isResultNotEmpty(result)) {\n          return result;\n        }\n        if (isString(route.component)) {\n          return commands.component(route.component);\n        }\n      });\n  }\n\n  /**\n   * Sets the router outlet (the DOM node where the content for the current\n   * route is inserted). Any content pre-existing in the router outlet is\n   * removed at the end of each render pass.\n   *\n   * NOTE: this method is automatically invoked first time when creating a new Router instance.\n   *\n   * @param {?Node} outlet the DOM node where the content for the current route\n   *     is inserted.\n   */\n  setOutlet(outlet) {\n    if (outlet) {\n      this.__ensureOutlet(outlet);\n    }\n    this.__outlet = outlet;\n  }\n\n  /**\n   * Returns the current router outlet. The initial value is `undefined`.\n   *\n   * @return {?Node} the current router outlet (or `undefined`)\n   */\n  getOutlet() {\n    return this.__outlet;\n  }\n\n  /**\n   * Sets the routing config (replacing the existing one) and triggers a\n   * navigation event so that the router outlet is refreshed according to the\n   * current `window.location` and the new routing config.\n   *\n   * Each route object may have the following properties, listed here in the processing order:\n   * * `path` – the route path (relative to the parent route if any) in the\n   * [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths\").\n   *\n   * * `children` – an array of nested routes or a function that provides this\n   * array at the render time. The function can be synchronous or asynchronous:\n   * in the latter case the render is delayed until the returned promise is\n   * resolved. The `children` function is executed every time when this route is\n   * being rendered. This allows for dynamic route structures (e.g. backend-defined),\n   * but it might have a performance impact as well. In order to avoid calling\n   * the function on subsequent renders, you can override the `children` property\n   * of the route object and save the calculated array there\n   * (via `context.route.children = [ route1, route2, ...];`).\n   * Parent routes are fully resolved before resolving the children. Children\n   * 'path' values are relative to the parent ones.\n   *\n   * * `action` – the action that is executed before the route is resolved.\n   * The value for this property should be a function, accepting `context`\n   * and `commands` parameters described below. If present, this function is\n   * always invoked first, disregarding of the other properties' presence.\n   * The action can return a result directly or within a `Promise`, which\n   * resolves to the result. If the action result is an `HTMLElement` instance,\n   * a `commands.component(name)` result, a `commands.redirect(path)` result,\n   * or a `context.next()` result, the current route resolution is finished,\n   * and other route config properties are ignored.\n   * See also **Route Actions** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `redirect` – other route's path to redirect to. Passes all route parameters to the redirect target.\n   * The target route should also be defined.\n   * See also **Redirects** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `bundle` – string containing the path to `.js` or `.mjs` bundle to load before resolving the route,\n   * or the object with \"module\" and \"nomodule\" keys referring to different bundles.\n   * Each bundle is only loaded once. If \"module\" and \"nomodule\" are set, only one bundle is loaded,\n   * depending on whether the browser supports ES modules or not.\n   * The property is ignored when either an `action` returns the result or `redirect` property is present.\n   * Any error, e.g. 404 while loading bundle will cause route resolution to throw.\n   * See also **Code Splitting** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * * `component` – the tag name of the Web Component to resolve the route to.\n   * The property is ignored when either an `action` returns the result or `redirect` property is present.\n   * If route contains the `component` property (or an action that return a component)\n   * and its child route also contains the `component` property, child route's component\n   * will be rendered as a light dom child of a parent component.\n   *\n   * * `name` – the string name of the route to use in the\n   * [`router.urlForName(name, params)`](#/classes/Router#method-urlForName)\n   * navigation helper method.\n   *\n   * For any route function (`action`, `children`) defined, the corresponding `route` object is available inside the callback\n   * through the `this` reference. If you need to access it, make sure you define the callback as a non-arrow function\n   * because arrow functions do not have their own `this` reference.\n   *\n   * `context` object that is passed to `action` function holds the following properties:\n   * * `context.pathname` – string with the pathname being resolved\n   *\n   * * `context.search` – search query string\n   *\n   * * `context.hash` – hash string\n   *\n   * * `context.params` – object with route parameters\n   *\n   * * `context.route` – object that holds the route that is currently being rendered.\n   *\n   * * `context.next()` – function for asynchronously getting the next route\n   * contents from the resolution chain (if any)\n   *\n   * `commands` object that is passed to `action` function has\n   * the following methods:\n   *\n   * * `commands.redirect(path)` – function that creates a redirect data\n   * for the path specified.\n   *\n   * * `commands.component(component)` – function that creates a new HTMLElement\n   * with current context. Note: the component created by this function is reused if visiting the same path twice in row.\n   *\n   *\n   * @param {!Array<!Route>|!Route} routes a single route or an array of those\n   * @param {?boolean} skipRender configure the router but skip rendering the\n   *     route corresponding to the current `window.location` values\n   *\n   * @return {!Promise<!Node>}\n   */\n  setRoutes(routes, skipRender = false) {\n    this.__previousContext = undefined;\n    this.__urlForName = undefined;\n    super.setRoutes(routes);\n    if (!skipRender) {\n      this.__onNavigationEvent();\n    }\n    return this.ready;\n  }\n\n  /**\n   * Asynchronously resolves the given pathname and renders the resolved route\n   * component into the router outlet. If no router outlet is set at the time of\n   * calling this method, or at the time when the route resolution is completed,\n   * a `TypeError` is thrown.\n   *\n   * Returns a promise that is fulfilled with the router outlet DOM Node after\n   * the route component is created and inserted into the router outlet, or\n   * rejected if no route matches the given path.\n   *\n   * If another render pass is started before the previous one is completed, the\n   * result of the previous render pass is ignored.\n   *\n   * @param {!string|!{pathname: !string, search: ?string, hash: ?string}} pathnameOrContext\n   *    the pathname to render or a context object with a `pathname` property,\n   *    optional `search` and `hash` properties, and other properties\n   *    to pass to the resolver.\n   * @param {boolean=} shouldUpdateHistory\n   *    update browser history with the rendered location\n   * @return {!Promise<!Node>}\n   */\n  render(pathnameOrContext, shouldUpdateHistory) {\n    const renderId = ++this.__lastStartedRenderId;\n    const context = Object.assign(\n      {\n        search: '',\n        hash: ''\n      },\n      isString(pathnameOrContext)\n        ? {pathname: pathnameOrContext}\n        : pathnameOrContext,\n      {\n        __renderId: renderId\n      }\n    );\n\n    // Find the first route that resolves to a non-empty result\n    this.ready = this.resolve(context)\n\n      // Process the result of this.resolve() and handle all special commands:\n      // (redirect / prevent / component). If the result is a 'component',\n      // then go deeper and build the entire chain of nested components matching\n      // the pathname. Also call all 'on before' callbacks along the way.\n      .then(context => this.__fullyResolveChain(context))\n\n      .then(context => {\n        if (this.__isLatestRender(context)) {\n          const previousContext = this.__previousContext;\n\n          // Check if the render was prevented and make an early return in that case\n          if (context === previousContext) {\n            // Replace the history with the previous context\n            // to make sure the URL stays the same.\n            this.__updateBrowserHistory(previousContext, true);\n            return this.location;\n          }\n\n          this.location = createLocation(context);\n\n          if (shouldUpdateHistory) {\n            // Replace only if first render redirects, so that we don’t leave\n            // the redirecting record in the history\n            this.__updateBrowserHistory(context, renderId === 1);\n          }\n\n          fireRouterEvent('location-changed', {router: this, location: this.location});\n\n          // Skip detaching/re-attaching there are no render changes\n          if (context.__skipAttach) {\n            this.__copyUnchangedElements(context, previousContext);\n            this.__previousContext = context;\n            return this.location;\n          }\n\n          this.__addAppearingContent(context, previousContext);\n          const animationDone = this.__animateIfNeeded(context);\n\n          this.__runOnAfterEnterCallbacks(context);\n          this.__runOnAfterLeaveCallbacks(context, previousContext);\n\n          return animationDone.then(() => {\n            if (this.__isLatestRender(context)) {\n              // If there is another render pass started after this one,\n              // the 'disappearing content' would be removed when the other\n              // render pass calls `this.__addAppearingContent()`\n              this.__removeDisappearingContent();\n\n              this.__previousContext = context;\n              return this.location;\n            }\n          });\n        }\n      })\n      .catch(error => {\n        if (renderId === this.__lastStartedRenderId) {\n          if (shouldUpdateHistory) {\n            this.__updateBrowserHistory(context);\n          }\n          removeDomNodes(this.__outlet && this.__outlet.children);\n          this.location = createLocation(Object.assign(context, {resolver: this}));\n          fireRouterEvent('error', Object.assign({router: this, error}, context));\n          throw error;\n        }\n      });\n    return this.ready;\n  }\n\n  // `topOfTheChainContextBeforeRedirects` is a context coming from Resolver.resolve().\n  // It would contain a 'redirect' route or the first 'component' route that\n  // matched the pathname. There might be more child 'component' routes to be\n  // resolved and added into the chain. This method would find and add them.\n  // `contextBeforeRedirects` is the context containing such a child component\n  // route. It's only necessary when this method is called recursively (otherwise\n  // it's the same as the 'top of the chain' context).\n  //\n  // Apart from building the chain of child components, this method would also\n  // handle 'redirect' routes, call 'onBefore' callbacks and handle 'prevent'\n  // and 'redirect' callback results.\n  __fullyResolveChain(topOfTheChainContextBeforeRedirects,\n    contextBeforeRedirects = topOfTheChainContextBeforeRedirects) {\n    return this.__findComponentContextAfterAllRedirects(contextBeforeRedirects)\n      // `contextAfterRedirects` is always a context with an `HTMLElement` result\n      // In other cases the promise gets rejected and .then() is not called\n      .then(contextAfterRedirects => {\n        const redirectsHappened = contextAfterRedirects !== contextBeforeRedirects;\n        const topOfTheChainContextAfterRedirects =\n          redirectsHappened ? contextAfterRedirects : topOfTheChainContextBeforeRedirects;\n\n        const matchedPath = getPathnameForRouter(\n          getMatchedPath(contextAfterRedirects.chain),\n          contextAfterRedirects.resolver\n        );\n        const isFound = (matchedPath === contextAfterRedirects.pathname);\n\n        // Recursive method to try matching more child and sibling routes\n        const findNextContextIfAny = (context, parent = context.route, prevResult) => {\n          return context.next(undefined, parent, prevResult).then(nextContext => {\n            if (nextContext === null || nextContext === notFoundResult) {\n              // Next context is not found in children, ...\n              if (isFound) {\n                // ...but original context is already fully matching - use it\n                return context;\n              } else if (parent.parent !== null) {\n                // ...and there is no full match yet - step up to check siblings\n                return findNextContextIfAny(context, parent.parent, nextContext);\n              } else {\n                return nextContext;\n              }\n            }\n\n            return nextContext;\n          });\n        };\n\n        return findNextContextIfAny(contextAfterRedirects).then(nextContext => {\n          if (nextContext === null || nextContext === notFoundResult) {\n            throw getNotFoundError(topOfTheChainContextAfterRedirects);\n          }\n\n          return nextContext\n          && nextContext !== notFoundResult\n          && nextContext !== contextAfterRedirects\n            ? this.__fullyResolveChain(topOfTheChainContextAfterRedirects, nextContext)\n            : this.__amendWithOnBeforeCallbacks(contextAfterRedirects);\n        });\n      });\n  }\n\n  __findComponentContextAfterAllRedirects(context) {\n    const result = context.result;\n    if (result instanceof HTMLElement) {\n      renderElement(context, result);\n      return Promise.resolve(context);\n    } else if (result.redirect) {\n      return this.__redirect(result.redirect, context.__redirectCount, context.__renderId)\n        .then(context => this.__findComponentContextAfterAllRedirects(context));\n    } else if (result instanceof Error) {\n      return Promise.reject(result);\n    } else {\n      return Promise.reject(\n        new Error(\n          log(\n            `Invalid route resolution result for path \"${context.pathname}\". ` +\n            `Expected redirect object or HTML element, but got: \"${logValue(result)}\". ` +\n            `Double check the action return value for the route.`\n          )\n        ));\n    }\n  }\n\n  __amendWithOnBeforeCallbacks(contextWithFullChain) {\n    return this.__runOnBeforeCallbacks(contextWithFullChain).then(amendedContext => {\n      if (amendedContext === this.__previousContext || amendedContext === contextWithFullChain) {\n        return amendedContext;\n      }\n      return this.__fullyResolveChain(amendedContext);\n    });\n  }\n\n  __runOnBeforeCallbacks(newContext) {\n    const previousContext = this.__previousContext || {};\n    const previousChain = previousContext.chain || [];\n    const newChain = newContext.chain;\n\n    let callbacks = Promise.resolve();\n    const prevent = () => ({cancel: true});\n    const redirect = (pathname) => createRedirect(newContext, pathname);\n\n    newContext.__divergedChainIndex = 0;\n    newContext.__skipAttach = false;\n    if (previousChain.length) {\n      for (let i = 0; i < Math.min(previousChain.length, newChain.length); i = ++newContext.__divergedChainIndex) {\n        if (previousChain[i].route !== newChain[i].route\n          || previousChain[i].path !== newChain[i].path && previousChain[i].element !== newChain[i].element\n          || !this.__isReusableElement(previousChain[i].element, newChain[i].element)) {\n          break;\n        }\n      }\n\n      // Skip re-attaching and notifications if element and chain do not change\n      newContext.__skipAttach =\n        // Same route chain\n        newChain.length === previousChain.length && newContext.__divergedChainIndex == newChain.length &&\n        // Same element\n        this.__isReusableElement(newContext.result, previousContext.result);\n\n      if (newContext.__skipAttach) {\n        // execute onBeforeLeave for changed segment element when skipping attach\n        for (let i = newChain.length - 1; i >= 0; i--) {\n          callbacks = this.__runOnBeforeLeaveCallbacks(callbacks, newContext, {prevent}, previousChain[i]);\n        }\n        // execute onBeforeEnter for changed segment element when skipping attach\n        for (let i = 0; i < newChain.length; i++) {\n          callbacks = this.__runOnBeforeEnterCallbacks(callbacks, newContext, {prevent, redirect}, newChain[i]);\n          previousChain[i].element.location = createLocation(newContext, previousChain[i].route);\n        }\n\n      } else {\n        // execute onBeforeLeave when NOT skipping attach\n        for (let i = previousChain.length - 1; i >= newContext.__divergedChainIndex; i--) {\n          callbacks = this.__runOnBeforeLeaveCallbacks(callbacks, newContext, {prevent}, previousChain[i]);\n        }\n      }\n    }\n    // execute onBeforeEnter when NOT skipping attach\n    if (!newContext.__skipAttach) {\n      for (let i = 0; i < newChain.length; i++) {\n        if (i < newContext.__divergedChainIndex) {\n          if (i < previousChain.length && previousChain[i].element) {\n            previousChain[i].element.location = createLocation(newContext, previousChain[i].route);\n          }\n        } else {\n          callbacks = this.__runOnBeforeEnterCallbacks(callbacks, newContext, {prevent, redirect}, newChain[i]);\n          if (newChain[i].element) {\n            newChain[i].element.location = createLocation(newContext, newChain[i].route);\n          }\n        }\n      }\n    }\n    return callbacks.then(amendmentResult => {\n      if (amendmentResult) {\n        if (amendmentResult.cancel) {\n          this.__previousContext.__renderId = newContext.__renderId;\n          return this.__previousContext;\n        }\n        if (amendmentResult.redirect) {\n          return this.__redirect(amendmentResult.redirect, newContext.__redirectCount, newContext.__renderId);\n        }\n      }\n      return newContext;\n    });\n  }\n\n  __runOnBeforeLeaveCallbacks(callbacks, newContext, commands, chainElement) {\n    const location = createLocation(newContext);\n    return callbacks.then(result => {\n      if (this.__isLatestRender(newContext)) {\n        const afterLeaveFunction = amend('onBeforeLeave', [location, commands, this], chainElement.element);\n        return afterLeaveFunction(result);\n      }\n    }).then(result => {\n      if (!(result || {}).redirect) {\n        return result;\n      }\n    });\n  }\n\n  __runOnBeforeEnterCallbacks(callbacks, newContext, commands, chainElement) {\n    const location = createLocation(newContext, chainElement.route);\n    return callbacks.then(result => {\n      if (this.__isLatestRender(newContext)) {\n        const beforeEnterFunction = amend('onBeforeEnter', [location, commands, this], chainElement.element);\n        return beforeEnterFunction(result);\n      }\n    });\n  }\n\n  __isReusableElement(element, otherElement) {\n    if (element && otherElement) {\n      return this.__createdByRouter.get(element) && this.__createdByRouter.get(otherElement)\n        ? element.localName === otherElement.localName\n        : element === otherElement;\n    }\n    return false;\n  }\n\n  __isLatestRender(context) {\n    return context.__renderId === this.__lastStartedRenderId;\n  }\n\n  __redirect(redirectData, counter, renderId) {\n    if (counter > MAX_REDIRECT_COUNT) {\n      throw new Error(log(`Too many redirects when rendering ${redirectData.from}`));\n    }\n\n    return this.resolve({\n      pathname: this.urlForPath(\n        redirectData.pathname,\n        redirectData.params\n      ),\n      redirectFrom: redirectData.from,\n      __redirectCount: (counter || 0) + 1,\n      __renderId: renderId\n    });\n  }\n\n  __ensureOutlet(outlet = this.__outlet) {\n    if (!(outlet instanceof Node)) {\n      throw new TypeError(log(`Expected router outlet to be a valid DOM Node (but got ${outlet})`));\n    }\n  }\n\n  __updateBrowserHistory({pathname, search = '', hash = ''}, replace) {\n    if (window.location.pathname !== pathname\n        || window.location.search !== search\n        || window.location.hash !== hash\n    ) {\n      const changeState = replace ? 'replaceState' : 'pushState';\n      window.history[changeState](null, document.title, pathname + search + hash);\n      window.dispatchEvent(new PopStateEvent('popstate', {state: 'vaadin-router-ignore'}));\n    }\n  }\n\n  __copyUnchangedElements(context, previousContext) {\n    // Find the deepest common parent between the last and the new component\n    // chains. Update references for the unchanged elements in the new chain\n    let deepestCommonParent = this.__outlet;\n    for (let i = 0; i < context.__divergedChainIndex; i++) {\n      const unchangedElement = previousContext && previousContext.chain[i].element;\n      if (unchangedElement) {\n        if (unchangedElement.parentNode === deepestCommonParent) {\n          context.chain[i].element = unchangedElement;\n          deepestCommonParent = unchangedElement;\n        } else {\n          break;\n        }\n      }\n    }\n    return deepestCommonParent;\n  }\n\n  __addAppearingContent(context, previousContext) {\n    this.__ensureOutlet();\n\n    // If the previous 'entering' animation has not completed yet,\n    // stop it and remove that content from the DOM before adding new one.\n    this.__removeAppearingContent();\n\n    // Copy reusable elements from the previousContext to current\n    const deepestCommonParent = this.__copyUnchangedElements(context, previousContext);\n\n    // Keep two lists of DOM elements:\n    //  - those that should be removed once the transition animation is over\n    //  - and those that should remain\n    this.__appearingContent = [];\n    this.__disappearingContent = Array\n      .from(deepestCommonParent.children)\n      .filter(\n        // Only remove layout content that was added by router\n        e => this.__addedByRouter.get(e) &&\n        // Do not remove the result element to avoid flickering\n        e !== context.result);\n\n    // Add new elements (starting after the deepest common parent) to the DOM.\n    // That way only the components that are actually different between the two\n    // locations are added to the DOM (and those that are common remain in the\n    // DOM without first removing and then adding them again).\n    let parentElement = deepestCommonParent;\n    for (let i = context.__divergedChainIndex; i < context.chain.length; i++) {\n      const elementToAdd = context.chain[i].element;\n      if (elementToAdd) {\n        parentElement.appendChild(elementToAdd);\n        this.__addedByRouter.set(elementToAdd, true);\n        if (parentElement === deepestCommonParent) {\n          this.__appearingContent.push(elementToAdd);\n        }\n        parentElement = elementToAdd;\n      }\n    }\n  }\n\n  __removeDisappearingContent() {\n    if (this.__disappearingContent) {\n      removeDomNodes(this.__disappearingContent);\n    }\n    this.__disappearingContent = null;\n    this.__appearingContent = null;\n  }\n\n  __removeAppearingContent() {\n    if (this.__disappearingContent && this.__appearingContent) {\n      removeDomNodes(this.__appearingContent);\n      this.__disappearingContent = null;\n      this.__appearingContent = null;\n    }\n  }\n\n  __runOnAfterLeaveCallbacks(currentContext, targetContext) {\n    if (!targetContext) {\n      return;\n    }\n\n    // REVERSE iteration: from Z to A\n    for (let i = targetContext.chain.length - 1; i >= currentContext.__divergedChainIndex; i--) {\n      if (!this.__isLatestRender(currentContext)) {\n        break;\n      }\n      const currentComponent = targetContext.chain[i].element;\n      if (!currentComponent) {\n        continue;\n      }\n      try {\n        const location = createLocation(currentContext);\n        runCallbackIfPossible(\n          currentComponent.onAfterLeave,\n          [location, {}, targetContext.resolver],\n          currentComponent);\n      } finally {\n        if (this.__disappearingContent.indexOf(currentComponent) > -1) {\n          removeDomNodes(currentComponent.children);\n        }\n      }\n    }\n  }\n\n  __runOnAfterEnterCallbacks(currentContext) {\n    // forward iteration: from A to Z\n    for (let i = currentContext.__divergedChainIndex; i < currentContext.chain.length; i++) {\n      if (!this.__isLatestRender(currentContext)) {\n        break;\n      }\n      const currentComponent = currentContext.chain[i].element || {};\n      const location = createLocation(currentContext, currentContext.chain[i].route);\n      runCallbackIfPossible(\n        currentComponent.onAfterEnter,\n        [location, {}, currentContext.resolver],\n        currentComponent);\n    }\n  }\n\n  __animateIfNeeded(context) {\n    const from = (this.__disappearingContent || [])[0];\n    const to = (this.__appearingContent || [])[0];\n    const promises = [];\n\n    const chain = context.chain;\n    let config;\n    for (let i = chain.length; i > 0; i--) {\n      if (chain[i - 1].route.animate) {\n        config = chain[i - 1].route.animate;\n        break;\n      }\n    }\n\n    if (from && to && config) {\n      const leave = isObject(config) && config.leave || 'leaving';\n      const enter = isObject(config) && config.enter || 'entering';\n      promises.push(animate(from, leave));\n      promises.push(animate(to, enter));\n    }\n\n    return Promise.all(promises).then(() => context);\n  }\n\n  /**\n   * Subscribes this instance to navigation events on the `window`.\n   *\n   * NOTE: beware of resource leaks. For as long as a router instance is\n   * subscribed to navigation events, it won't be garbage collected.\n   */\n  subscribe() {\n    window.addEventListener('vaadin-router-go', this.__navigationEventHandler);\n  }\n\n  /**\n   * Removes the subscription to navigation events created in the `subscribe()`\n   * method.\n   */\n  unsubscribe() {\n    window.removeEventListener('vaadin-router-go', this.__navigationEventHandler);\n  }\n\n  __onNavigationEvent(event) {\n    const {pathname, search, hash} = event ? event.detail : window.location;\n    if (isString(this.__normalizePathname(pathname))) {\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n      this.render({pathname, search, hash}, true);\n    }\n  }\n\n  /**\n   * Configures what triggers Router navigation events:\n   *  - `POPSTATE`: popstate events on the current `window`\n   *  - `CLICK`: click events on `<a>` links leading to the current page\n   *\n   * This method is invoked with the pre-configured values when creating a new Router instance.\n   * By default, both `POPSTATE` and `CLICK` are enabled. This setup is expected to cover most of the use cases.\n   *\n   * See the `router-config.js` for the default navigation triggers config. Based on it, you can\n   * create the own one and only import the triggers you need, instead of pulling in all the code,\n   * e.g. if you want to handle `click` differently.\n   *\n   * See also **Navigation Triggers** section in [Live Examples](#/classes/Router/demos/demo/index.html).\n   *\n   * @param {...NavigationTrigger} triggers\n   */\n  static setTriggers(...triggers) {\n    setNavigationTriggers(triggers);\n  }\n\n  /**\n   * Generates a URL for the route with the given name, optionally performing\n   * substitution of parameters.\n   *\n   * The route is searched in all the Router instances subscribed to\n   * navigation events.\n   *\n   * **Note:** For child route names, only array children are considered.\n   * It is not possible to generate URLs using a name for routes set with\n   * a children function.\n   *\n   * @function urlForName\n   * @param {!string} name the route name or the route’s `component` name.\n   * @param {Params=} params Optional object with route path parameters.\n   * Named parameters are passed by name (`params[name] = value`), unnamed\n   * parameters are passed by index (`params[index] = value`).\n   *\n   * @return {string}\n   */\n  urlForName(name, params) {\n    if (!this.__urlForName) {\n      this.__urlForName = generateUrls(this);\n    }\n    return getPathnameForRouter(\n      this.__urlForName(name, params),\n      this\n    );\n  }\n\n  /**\n   * Generates a URL for the given route path, optionally performing\n   * substitution of parameters.\n   *\n   * @param {!string} path string route path declared in [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths\").\n   * @param {Params=} params Optional object with route path parameters.\n   * Named parameters are passed by name (`params[name] = value`), unnamed\n   * parameters are passed by index (`params[index] = value`).\n   *\n   * @return {string}\n   */\n  urlForPath(path, params) {\n    return getPathnameForRouter(\n      Router.pathToRegexp.compile(path)(params),\n      this\n    );\n  }\n\n  /**\n   * Triggers navigation to a new path. Returns a boolean without waiting until\n   * the navigation is complete. Returns `true` if at least one `Router`\n   * has handled the navigation (was subscribed and had `baseUrl` matching\n   * the `path` argument), otherwise returns `false`.\n   *\n   * @param {!string|!{pathname: !string, search: (string|undefined), hash: (string|undefined)}} path\n   *   a new in-app path string, or an URL-like object with `pathname`\n   *   string property, and optional `search` and `hash` string properties.\n   * @return {boolean}\n   */\n  static go(path) {\n    const {pathname, search, hash} = isString(path)\n      ? this.__createUrl(path, 'http://a') // some base to omit origin\n      : path;\n    return fireRouterEvent('go', {pathname, search, hash});\n  }\n}\n","const DEV_MODE_CODE_REGEXP =\n  /\\/\\*\\*\\s+vaadin-dev-mode:start([\\s\\S]*)vaadin-dev-mode:end\\s+\\*\\*\\//i;\n\nconst FlowClients = window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients;\n\nfunction isMinified() {\n  function test() {\n    /** vaadin-dev-mode:start\n    return false;\n    vaadin-dev-mode:end **/\n    return true;\n  }\n  return uncommentAndRun(test);\n}\n\nfunction isDevelopmentMode() {\n  try {\n    if (isForcedDevelopmentMode()) {\n      return true;\n    }\n\n    if (!isLocalhost()) {\n      return false;\n    }\n\n    if (FlowClients) {\n      return !isFlowProductionMode();\n    }\n\n    return !isMinified();\n  } catch (e) {\n    // Some error in this code, assume production so no further actions will be taken\n    return false;\n  }\n}\n\nfunction isForcedDevelopmentMode() {\n  return localStorage.getItem(\"vaadin.developmentmode.force\");\n}\n\nfunction isLocalhost() {\n  return ([\"localhost\",\"127.0.0.1\"].indexOf(window.location.hostname) >= 0);\n}\n\nfunction isFlowProductionMode() {\n  if (FlowClients) {\n    const productionModeApps = Object.keys(FlowClients)\n      .map(key => FlowClients[key])\n      .filter(client => client.productionMode);\n    if (productionModeApps.length > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction uncommentAndRun(callback, args) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n\n  const match = DEV_MODE_CODE_REGEXP.exec(callback.toString());\n  if (match) {\n    try {\n      // requires CSP: script-src 'unsafe-eval'\n      callback = new Function(match[1]);\n    } catch (e) {\n      // eat the exception\n      console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e)\n    }\n  }\n\n  return callback(args);\n}\n\n// A guard against polymer-modulizer removing the window.Vaadin\n// initialization above.\nwindow['Vaadin'] = window['Vaadin'] || {};\n\n/**\n * Inspects the source code of the given `callback` function for\n * specially-marked _commented_ code. If such commented code is found in the\n * callback source, uncomments and runs that code instead of the callback\n * itself. Otherwise runs the callback as is.\n *\n * The optional arguments are passed into the callback / uncommented code,\n * the result is returned.\n *\n * See the `isMinified()` function source code in this file for an example.\n *\n */\nexport const runIfDevelopmentMode = function(callback, args) {\n  if (window.Vaadin.developmentMode) {\n    return uncommentAndRun(callback, args);\n  }\n};\n\nif (window.Vaadin.developmentMode === undefined) {\n  window.Vaadin.developmentMode = isDevelopmentMode();\n}\n","/* This file is autogenerated from src/vaadin-usage-statistics.tpl.html */\n/*\n\nThis script gathers usage statistics from the application running in development mode.\n\nStatistics gathering is automatically disabled and excluded from production builds.\n\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\n\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport { runIfDevelopmentMode } from '@vaadin/vaadin-development-mode-detector/vaadin-development-mode-detector.js';\n\nfunction maybeGatherAndSendStats() {\n  /** vaadin-dev-mode:start\n  (function () {\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar getPolymerVersion = function getPolymerVersion() {\n  return window.Polymer && window.Polymer.version;\n};\n\nvar StatisticsGatherer = function () {\n  function StatisticsGatherer(logger) {\n    classCallCheck(this, StatisticsGatherer);\n\n    this.now = new Date().getTime();\n    this.logger = logger;\n  }\n\n  createClass(StatisticsGatherer, [{\n    key: 'frameworkVersionDetectors',\n    value: function frameworkVersionDetectors() {\n      return {\n        'Flow': function Flow() {\n          if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {\n            var flowVersions = Object.keys(window.Vaadin.Flow.clients).map(function (key) {\n              return window.Vaadin.Flow.clients[key];\n            }).filter(function (client) {\n              return client.getVersionInfo;\n            }).map(function (client) {\n              return client.getVersionInfo().flow;\n            });\n            if (flowVersions.length > 0) {\n              return flowVersions[0];\n            }\n          }\n        },\n        'Vaadin Framework': function VaadinFramework() {\n          if (window.vaadin && window.vaadin.clients) {\n            var frameworkVersions = Object.values(window.vaadin.clients).filter(function (client) {\n              return client.getVersionInfo;\n            }).map(function (client) {\n              return client.getVersionInfo().vaadinVersion;\n            });\n            if (frameworkVersions.length > 0) {\n              return frameworkVersions[0];\n            }\n          }\n        },\n        'AngularJs': function AngularJs() {\n          if (window.angular && window.angular.version && window.angular.version) {\n            return window.angular.version.full;\n          }\n        },\n        'Angular': function Angular() {\n          if (window.ng) {\n            var tags = document.querySelectorAll(\"[ng-version]\");\n            if (tags.length > 0) {\n              return tags[0].getAttribute(\"ng-version\");\n            }\n            return \"Unknown\";\n          }\n        },\n        'Backbone.js': function BackboneJs() {\n          if (window.Backbone) {\n            return window.Backbone.VERSION;\n          }\n        },\n        'React': function React() {\n          var reactSelector = '[data-reactroot], [data-reactid]';\n          if (!!document.querySelector(reactSelector)) {\n            // React does not publish the version by default\n            return \"unknown\";\n          }\n        },\n        'Ember': function Ember() {\n          if (window.Em && window.Em.VERSION) {\n            return window.Em.VERSION;\n          } else if (window.Ember && window.Ember.VERSION) {\n            return window.Ember.VERSION;\n          }\n        },\n        'jQuery': function (_jQuery) {\n          function jQuery() {\n            return _jQuery.apply(this, arguments);\n          }\n\n          jQuery.toString = function () {\n            return _jQuery.toString();\n          };\n\n          return jQuery;\n        }(function () {\n          if (typeof jQuery === 'function' && jQuery.prototype.jquery !== undefined) {\n            return jQuery.prototype.jquery;\n          }\n        }),\n        'Polymer': function Polymer() {\n          var version = getPolymerVersion();\n          if (version) {\n            return version;\n          }\n        },\n        'LitElement': function LitElement() {\n          var version = window.litElementVersions && window.litElementVersions[0];\n          if (version) {\n            return version;\n          }\n        },\n        'LitHtml': function LitHtml() {\n          var version = window.litHtmlVersions && window.litHtmlVersions[0];\n          if (version) {\n            return version;\n          }\n        },\n        'Vue.js': function VueJs() {\n          if (window.Vue) {\n            return window.Vue.version;\n          }\n        }\n      };\n    }\n  }, {\n    key: 'getUsedVaadinElements',\n    value: function getUsedVaadinElements(elements) {\n      var version = getPolymerVersion();\n      var elementClasses = void 0;\n      // NOTE: In case you edit the code here, YOU MUST UPDATE any statistics reporting code in Flow.\n      // Check all locations calling the method getEntries() in\n      // https://github.com/vaadin/flow/blob/master/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatistics.java#L106\n      // Currently it is only used by BootstrapHandler.\n      if (version && version.indexOf('2') === 0) {\n        // Polymer 2: components classes are stored in window.Vaadin\n        elementClasses = Object.keys(window.Vaadin).map(function (c) {\n          return window.Vaadin[c];\n        }).filter(function (c) {\n          return c.is;\n        });\n      } else {\n        // Polymer 3: components classes are stored in window.Vaadin.registrations\n        elementClasses = window.Vaadin.registrations || [];\n      }\n      elementClasses.forEach(function (klass) {\n        var version = klass.version ? klass.version : \"0.0.0\";\n        elements[klass.is] = { version: version };\n      });\n    }\n  }, {\n    key: 'getUsedVaadinThemes',\n    value: function getUsedVaadinThemes(themes) {\n      ['Lumo', 'Material'].forEach(function (themeName) {\n        var theme;\n        var version = getPolymerVersion();\n        if (version && version.indexOf('2') === 0) {\n          // Polymer 2: themes are stored in window.Vaadin\n          theme = window.Vaadin[themeName];\n        } else {\n          // Polymer 3: themes are stored in custom element registry\n          theme = customElements.get('vaadin-' + themeName.toLowerCase() + '-styles');\n        }\n        if (theme && theme.version) {\n          themes[themeName] = { version: theme.version };\n        }\n      });\n    }\n  }, {\n    key: 'getFrameworks',\n    value: function getFrameworks(frameworks) {\n      var detectors = this.frameworkVersionDetectors();\n      Object.keys(detectors).forEach(function (framework) {\n        var detector = detectors[framework];\n        try {\n          var version = detector();\n          if (version) {\n            frameworks[framework] = { version: version };\n          }\n        } catch (e) {}\n      });\n    }\n  }, {\n    key: 'gather',\n    value: function gather(storage) {\n      var storedStats = storage.read();\n      var gatheredStats = {};\n      var types = [\"elements\", \"frameworks\", \"themes\"];\n\n      types.forEach(function (type) {\n        gatheredStats[type] = {};\n        if (!storedStats[type]) {\n          storedStats[type] = {};\n        }\n      });\n\n      var previousStats = JSON.stringify(storedStats);\n\n      this.getUsedVaadinElements(gatheredStats.elements);\n      this.getFrameworks(gatheredStats.frameworks);\n      this.getUsedVaadinThemes(gatheredStats.themes);\n\n      var now = this.now;\n      types.forEach(function (type) {\n        var keys = Object.keys(gatheredStats[type]);\n        keys.forEach(function (key) {\n          if (!storedStats[type][key] || _typeof(storedStats[type][key]) != _typeof({})) {\n            storedStats[type][key] = { firstUsed: now };\n          }\n          // Discards any previously logged version number\n          storedStats[type][key].version = gatheredStats[type][key].version;\n          storedStats[type][key].lastUsed = now;\n        });\n      });\n\n      var newStats = JSON.stringify(storedStats);\n      storage.write(newStats);\n      if (newStats != previousStats && Object.keys(storedStats).length > 0) {\n        this.logger.debug(\"New stats: \" + newStats);\n      }\n    }\n  }]);\n  return StatisticsGatherer;\n}();\n\nvar StatisticsStorage = function () {\n  function StatisticsStorage(key) {\n    classCallCheck(this, StatisticsStorage);\n\n    this.key = key;\n  }\n\n  createClass(StatisticsStorage, [{\n    key: 'read',\n    value: function read() {\n      var localStorageStatsString = localStorage.getItem(this.key);\n      try {\n        return JSON.parse(localStorageStatsString ? localStorageStatsString : '{}');\n      } catch (e) {\n        return {};\n      }\n    }\n  }, {\n    key: 'write',\n    value: function write(data) {\n      localStorage.setItem(this.key, data);\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      localStorage.removeItem(this.key);\n    }\n  }, {\n    key: 'isEmpty',\n    value: function isEmpty() {\n      var storedStats = this.read();\n      var empty = true;\n      Object.keys(storedStats).forEach(function (key) {\n        if (Object.keys(storedStats[key]).length > 0) {\n          empty = false;\n        }\n      });\n\n      return empty;\n    }\n  }]);\n  return StatisticsStorage;\n}();\n\nvar StatisticsSender = function () {\n  function StatisticsSender(url, logger) {\n    classCallCheck(this, StatisticsSender);\n\n    this.url = url;\n    this.logger = logger;\n  }\n\n  createClass(StatisticsSender, [{\n    key: 'send',\n    value: function send(data, errorHandler) {\n      var logger = this.logger;\n\n      if (navigator.onLine === false) {\n        logger.debug(\"Offline, can't send\");\n        errorHandler();\n        return;\n      }\n      logger.debug(\"Sending data to \" + this.url);\n\n      var req = new XMLHttpRequest();\n      req.withCredentials = true;\n      req.addEventListener(\"load\", function () {\n        // Stats sent, nothing more to do\n        logger.debug(\"Response: \" + req.responseText);\n      });\n      req.addEventListener(\"error\", function () {\n        logger.debug(\"Send failed\");\n        errorHandler();\n      });\n      req.addEventListener(\"abort\", function () {\n        logger.debug(\"Send aborted\");\n        errorHandler();\n      });\n      req.open(\"POST\", this.url);\n      req.setRequestHeader(\"Content-Type\", \"application/json\");\n      req.send(data);\n    }\n  }]);\n  return StatisticsSender;\n}();\n\nvar StatisticsLogger = function () {\n  function StatisticsLogger(id) {\n    classCallCheck(this, StatisticsLogger);\n\n    this.id = id;\n  }\n\n  createClass(StatisticsLogger, [{\n    key: '_isDebug',\n    value: function _isDebug() {\n      return localStorage.getItem(\"vaadin.\" + this.id + \".debug\");\n    }\n  }, {\n    key: 'debug',\n    value: function debug(msg) {\n      if (this._isDebug()) {\n        console.info(this.id + \": \" + msg);\n      }\n    }\n  }]);\n  return StatisticsLogger;\n}();\n\nvar UsageStatistics = function () {\n  function UsageStatistics() {\n    classCallCheck(this, UsageStatistics);\n\n    this.now = new Date();\n    this.timeNow = this.now.getTime();\n    this.gatherDelay = 10; // Delay between loading this file and gathering stats\n    this.initialDelay = 24 * 60 * 60;\n\n    this.logger = new StatisticsLogger(\"statistics\");\n    this.storage = new StatisticsStorage(\"vaadin.statistics.basket\");\n    this.gatherer = new StatisticsGatherer(this.logger);\n    this.sender = new StatisticsSender(\"https://tools.vaadin.com/usage-stats/submit\", this.logger);\n  }\n\n  createClass(UsageStatistics, [{\n    key: 'maybeGatherAndSend',\n    value: function maybeGatherAndSend() {\n      var _this = this;\n\n      if (localStorage.getItem(UsageStatistics.optOutKey)) {\n        return;\n      }\n      this.gatherer.gather(this.storage);\n      setTimeout(function () {\n        _this.maybeSend();\n      }, this.gatherDelay * 1000);\n    }\n  }, {\n    key: 'lottery',\n    value: function lottery() {\n      return true;\n    }\n  }, {\n    key: 'currentMonth',\n    value: function currentMonth() {\n      return this.now.getYear() * 12 + this.now.getMonth();\n    }\n  }, {\n    key: 'maybeSend',\n    value: function maybeSend() {\n      var firstUse = Number(localStorage.getItem(UsageStatistics.firstUseKey));\n      var monthProcessed = Number(localStorage.getItem(UsageStatistics.monthProcessedKey));\n\n      if (!firstUse) {\n        // Use a grace period to avoid interfering with tests, incognito mode etc\n        firstUse = this.timeNow;\n        localStorage.setItem(UsageStatistics.firstUseKey, firstUse);\n      }\n\n      if (this.timeNow < firstUse + this.initialDelay * 1000) {\n        this.logger.debug(\"No statistics will be sent until the initial delay of \" + this.initialDelay + \"s has passed\");\n        return;\n      }\n      if (this.currentMonth() <= monthProcessed) {\n        this.logger.debug(\"This month has already been processed\");\n        return;\n      }\n      localStorage.setItem(UsageStatistics.monthProcessedKey, this.currentMonth());\n      // Use random sampling\n      if (this.lottery()) {\n        this.logger.debug(\"Congratulations, we have a winner!\");\n      } else {\n        this.logger.debug(\"Sorry, no stats from you this time\");\n        return;\n      }\n\n      this.send();\n    }\n  }, {\n    key: 'send',\n    value: function send() {\n      // Ensure we have the latest data\n      this.gatherer.gather(this.storage);\n\n      // Read, send and clean up\n      var data = this.storage.read();\n      data[\"firstUse\"] = Number(localStorage.getItem(UsageStatistics.firstUseKey));\n      data[\"usageStatisticsVersion\"] = UsageStatistics.version;\n      var info = 'This request contains usage statistics gathered from the application running in development mode. \\n\\nStatistics gathering is automatically disabled and excluded from production builds.\\n\\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\\n\\n\\n\\n';\n      var self = this;\n      this.sender.send(info + JSON.stringify(data), function () {\n        // Revert the 'month processed' flag\n        localStorage.setItem(UsageStatistics.monthProcessedKey, self.currentMonth() - 1);\n      });\n    }\n  }], [{\n    key: 'version',\n    get: function get$1() {\n      return '2.1.0';\n    }\n  }, {\n    key: 'firstUseKey',\n    get: function get$1() {\n      return 'vaadin.statistics.firstuse';\n    }\n  }, {\n    key: 'monthProcessedKey',\n    get: function get$1() {\n      return 'vaadin.statistics.monthProcessed';\n    }\n  }, {\n    key: 'optOutKey',\n    get: function get$1() {\n      return 'vaadin.statistics.optout';\n    }\n  }]);\n  return UsageStatistics;\n}();\n\ntry {\n  window.Vaadin = window.Vaadin || {};\n  window.Vaadin.usageStatsChecker = window.Vaadin.usageStatsChecker || new UsageStatistics();\n  window.Vaadin.usageStatsChecker.maybeGatherAndSend();\n} catch (e) {\n  // Intentionally ignored as this is not a problem in the app being developed\n}\n\n}());\n\n  vaadin-dev-mode:end **/\n}\n\nexport const usageStatistics = function() {\n  if (typeof runIfDevelopmentMode === 'function') {\n    return runIfDevelopmentMode(maybeGatherAndSendStats);\n  }\n};\n","import {usageStatistics} from '@vaadin/vaadin-usage-statistics/vaadin-usage-statistics.js';\n\nwindow.Vaadin = window.Vaadin || {};\nwindow.Vaadin.registrations = window.Vaadin.registrations || [];\n\nwindow.Vaadin.registrations.push({\n  is: '@vaadin/router',\n  version: '1.7.4',\n});\n\nusageStatistics();\n","import CLICK from './triggers/click.js';\nimport POPSTATE from './triggers/popstate.js';\nimport {Router} from './router.js';\nimport './router-meta.js';\nRouter.NavigationTrigger = {POPSTATE, CLICK};\nexport {Router};\n","import { Router } from \"@vaadin/router\";\n\nconst router = new Router(document.querySelector(\".root\"));\n\nrouter.setRoutes([\n  { path: \"/\", component: \"home-page\" },\n  { path: \"/access-room\", component: \"access-page\" },\n\n  { path: \"/game-room\", component: \"game-room-page\" },\n  { path: \"/pre-game-room\", component: \"pre-game-room-page\" },\n  { path: \"/choose-room\", component: \"choose-room-page\" },\n  { path: \"/instructions\", component: \"instructions-page\" },\n  { path: \"/comparition\", component: \"comparition-page\" },\n\n  { path: \"/waiting\", component: \"waiting-page\" },\n  { path: \"/result\", component: \"result-room\" },\n  { path: \"/path\", component: \"path-page\" },\n]);\n","class Home extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  render() {\n    this.shadow.innerHTML = `\n      <div class=\"container\">\n      <custom-text variant=\"title\" class=\"title\">Piedra Papel o Tijera</custom-text>\n      <welcome-form></welcome-form>\n      </div>\n    `;\n    const style = document.createElement(\"style\");\n    style.innerHTML = `\n      .container{\n        width: 100%;\n        height: 100vh;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n      }\n    `;\n    this.shadow.appendChild(style);\n  }\n  connectedCallback() {\n    this.render();\n  }\n}\n\ncustomElements.define(\"home-page\", Home);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  return typeof indexedDB === 'object';\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\nexport interface Observer<T> {\n  // Called once for each value in a stream of values.\n  next: NextFn<T>;\n\n  // A stream terminates by a single call to EITHER error() or complete().\n  error: ErrorFn;\n\n  // No events will be sent to next() once complete() is called.\n  complete: CompleteFn;\n}\n\nexport type PartialObserver<T> = Partial<Observer<T>>;\n\n// TODO: Support also Unsubscribe.unsubscribe?\nexport type Unsubscribe = () => void;\n\n/**\n * The Subscribe interface has two forms - passing the inline function\n * callbacks, or a object interface with callback properties.\n */\nexport interface Subscribe<T> {\n  (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\n  (observer: PartialObserver<T>): Unsubscribe;\n}\n\nexport interface Observable<T> {\n  // Subscribe method\n  subscribe: Subscribe<T>;\n}\n\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nexport function createSubscribe<T>(\n  executor: Executor<T>,\n  onNoObservers?: Executor<T>\n): Subscribe<T> {\n  const proxy = new ObserverProxy<T>(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\n\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nclass ObserverProxy<T> implements Observer<T> {\n  private observers: Array<Observer<T>> | undefined = [];\n  private unsubscribes: Unsubscribe[] = [];\n  private onNoObservers: Executor<T> | undefined;\n  private observerCount = 0;\n  // Micro-task scheduling by calling task.then().\n  private task = Promise.resolve();\n  private finalized = false;\n  private finalError?: Error;\n\n  /**\n   * @param executor Function which can make calls to a single Observer\n   *     as a proxy.\n   * @param onNoObservers Callback when count of Observers goes to zero.\n   */\n  constructor(executor: Executor<T>, onNoObservers?: Executor<T>) {\n    this.onNoObservers = onNoObservers;\n    // Call the executor asynchronously so subscribers that are called\n    // synchronously after the creation of the subscribe function\n    // can still receive the very first value generated in the executor.\n    this.task\n      .then(() => {\n        executor(this);\n      })\n      .catch(e => {\n        this.error(e);\n      });\n  }\n\n  next(value: T): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.next(value);\n    });\n  }\n\n  error(error: Error): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.error(error);\n    });\n    this.close(error);\n  }\n\n  complete(): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.complete();\n    });\n    this.close();\n  }\n\n  /**\n   * Subscribe function that can be used to add an Observer to the fan-out list.\n   *\n   * - We require that no event is sent to a subscriber sychronously to their\n   *   call to subscribe().\n   */\n  subscribe(\n    nextOrObserver?: NextFn<T> | PartialObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ): Unsubscribe {\n    let observer: Observer<T>;\n\n    if (\n      nextOrObserver === undefined &&\n      error === undefined &&\n      complete === undefined\n    ) {\n      throw new Error('Missing Observer.');\n    }\n\n    // Assemble an Observer object when passed as callback functions.\n    if (\n      implementsAnyMethods(nextOrObserver as { [key: string]: unknown }, [\n        'next',\n        'error',\n        'complete'\n      ])\n    ) {\n      observer = nextOrObserver as Observer<T>;\n    } else {\n      observer = {\n        next: nextOrObserver as NextFn<T>,\n        error,\n        complete\n      } as Observer<T>;\n    }\n\n    if (observer.next === undefined) {\n      observer.next = noop as NextFn<T>;\n    }\n    if (observer.error === undefined) {\n      observer.error = noop as ErrorFn;\n    }\n    if (observer.complete === undefined) {\n      observer.complete = noop as CompleteFn;\n    }\n\n    const unsub = this.unsubscribeOne.bind(this, this.observers!.length);\n\n    // Attempt to subscribe to a terminated Observable - we\n    // just respond to the Observer with the final error or complete\n    // event.\n    if (this.finalized) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.task.then(() => {\n        try {\n          if (this.finalError) {\n            observer.error(this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {\n          // nothing\n        }\n        return;\n      });\n    }\n\n    this.observers!.push(observer as Observer<T>);\n\n    return unsub;\n  }\n\n  // Unsubscribe is synchronous - we guarantee that no events are sent to\n  // any unsubscribed Observer.\n  private unsubscribeOne(i: number): void {\n    if (this.observers === undefined || this.observers[i] === undefined) {\n      return;\n    }\n\n    delete this.observers[i];\n\n    this.observerCount -= 1;\n    if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n      this.onNoObservers(this);\n    }\n  }\n\n  private forEachObserver(fn: (observer: Observer<T>) => void): void {\n    if (this.finalized) {\n      // Already closed by previous event....just eat the additional values.\n      return;\n    }\n\n    // Since sendOne calls asynchronously - there is no chance that\n    // this.observers will become undefined.\n    for (let i = 0; i < this.observers!.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n\n  // Call the Observer via one of it's callback function. We are careful to\n  // confirm that the observe has not been unsubscribed since this asynchronous\n  // function had been queued.\n  private sendOne(i: number, fn: (observer: Observer<T>) => void): void {\n    // Execute the callback asynchronously\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      if (this.observers !== undefined && this.observers[i] !== undefined) {\n        try {\n          fn(this.observers[i]);\n        } catch (e) {\n          // Ignore exceptions raised in Observers or missing methods of an\n          // Observer.\n          // Log error to console. b/31404806\n          if (typeof console !== 'undefined' && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  }\n\n  private close(err?: Error): void {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    if (err !== undefined) {\n      this.finalError = err;\n    }\n    // Proxy is no longer needed - garbage collect references\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      this.observers = undefined;\n      this.onNoObservers = undefined;\n    });\n  }\n}\n\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(fn: Function, onError?: ErrorFn): Function {\n  return (...args: unknown[]) => {\n    Promise.resolve(true)\n      .then(() => {\n        fn(...args);\n      })\n      .catch((error: Error) => {\n        if (onError) {\n          onError(error);\n        }\n      });\n  };\n}\n\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(\n  obj: { [key: string]: unknown },\n  methods: string[]\n): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  for (const method of methods) {\n    if (method in obj && typeof obj[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction noop(): void {\n  // do nothing\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nexport const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nexport const RANDOM_FACTOR = 0.5;\n\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nexport function calculateBackoffMillis(\n  backoffCount: number,\n  intervalMillis: number = DEFAULT_INTERVAL_MILLIS,\n  backoffFactor: number = DEFAULT_BACKOFF_FACTOR\n): number {\n  // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n\n  // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n  const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n      currBaseValue *\n      // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n      // if we add or subtract.\n      (Math.random() - 0.5) *\n      2\n  );\n\n  // Limits backoff to max to avoid effectively permanent backoff.\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provide English ordinal letters after a number\n */\nexport function ordinal(i: number): string {\n  if (!Number.isFinite(i)) {\n    return `${i}`;\n  }\n  return i + indicator(i);\n}\n\nfunction indicator(i: number): string {\n  i = Math.abs(i);\n  const cent = i % 100;\n  if (cent >= 10 && cent <= 20) {\n    return 'th';\n  }\n  const dec = i % 10;\n  if (dec === 1) {\n    return 'st';\n  }\n  if (dec === 2) {\n    return 'nd';\n  }\n  if (dec === 3) {\n    return 'rd';\n  }\n  return 'th';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  STORAGE_DELETE = 'storage-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppError.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppError.STORAGE_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\nexport function initializeApp(\n  options: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.STORAGE_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    throw ERROR_FACTORY.create(AppError.STORAGE_GET, {\n      originalErrorMessage: (e as Error)?.message\n    });\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    throw ERROR_FACTORY.create(AppError.STORAGE_WRITE, {\n      originalErrorMessage: (e as Error)?.message\n    });\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","import { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, onValue } from \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"3Kqkb9z5Icx2cQvwBSUcnv5NgJw6uemItncCEDaI\",\n  authDomain: \"mod6v4.firebaseapp.com\",\n  databaseURL: \"https://mod6v4-default-rtdb.firebaseio.com\",\n  projectId: \"mod6v4\",\n};\n\nconst app = initializeApp(firebaseConfig);\nconst rtdb = getDatabase(app);\n\nexport { rtdb, ref, onValue };\n","type move = \"piedra\" | \"papel\" | \"tijera\";\ntype player = \"playerOne\" | \"playerTwo\";\nlet perras;\nconst API_BASE = \"https://desafio-mod6.herokuapp.com\";\nimport { rtdb, ref, onValue } from \"./rtdb\";\n\nconst state = {\n  data: {\n    userId: \"\",\n    roomId: \"\",\n    rtdbRoomId: \"\",\n    roomCreator: \"\",\n    rtdbData: {},\n    result: \"\",\n  },\n  listeners: [],\n\n  init() {\n    const localData = localStorage.getItem(\"saved-state\");\n    this.setState(JSON.parse(localData as any));\n  },\n\n  listenRTDBData() {\n    const cs = this.getState();\n    const gameRoomRef = ref(rtdb, `/gamerooms/${cs.rtdbRoomId}/currentGame`);\n    onValue(gameRoomRef, (snapshot) => {\n      const data = snapshot.val();\n      this.setState({ ...cs, rtdbData: data });\n    });\n  },\n\n  getState() {\n    return this.data;\n  },\n  //seteamos el nombre y el email del player en el state\n  setNombreAndEmail(nombre: string, email: string) {\n    const cs = this.getState();\n    cs.nombre = nombre;\n    cs.email = email;\n    this.setState(cs);\n  },\n\n  setState(newState) {\n    this.data = newState;\n    for (const cb of this.listeners) {\n      cb();\n    }\n    localStorage.setItem(\"saved-state\", JSON.stringify(newState));\n    console.log(\"Soy el state, he cambiado\", this.data);\n  },\n\n  subscribe(callback: (any) => any) {\n    this.listeners.push(callback);\n  },\n\n  async createPlayer(cb?) {\n    try {\n      const cs = this.getState();\n      const nombre = cs.nombre;\n      const email = cs.email;\n      const urlForFetch = API_BASE + \"/signup\";\n\n      const fetchedData = await fetch(urlForFetch, {\n        mode: \"cors\",\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email: email, nombre: nombre }),\n      });\n\n      const response = await fetchedData.json();\n\n      cs.registrated = true;\n      this.setState(cs);\n      console.log(\"Player creado\");\n\n      if (cb) {\n        cb();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  },\n\n  async guestPlayer(callback?) {\n    const cs = this.getState();\n    const rtdbGameRoomId = cs.rtdbRoomId;\n    const nombre = cs.nombre;\n\n    await fetch(API_BASE + \"/player-guest\", {\n      mode: \"cors\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        nombre: nombre,\n        rtdbGameRoomId: rtdbGameRoomId,\n      }),\n    });\n\n    if (callback) {\n      callback();\n    }\n  },\n\n  async signIn(cb?) {\n    const cs = this.getState();\n\n    if (cs.email) {\n      const fetchedData = await fetch(API_BASE + \"/authorize\", {\n        mode: \"cors\",\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email: cs.email }),\n      });\n      const response = await fetchedData.json();\n      cs.userId = response.id;\n      this.setState(cs);\n      if (cb) {\n        cb();\n      }\n    } else {\n      console.error(\"no hay un mail en el state\");\n    }\n  },\n\n  async askNewGameRoom(callback?) {\n    const cs = this.getState();\n    try {\n      const requestAskingNewGameroom = await fetch(API_BASE + \"/game-rooms\", {\n        method: \"post\",\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n        body: JSON.stringify({ userId: cs.userId, nombre: cs.nombre }),\n      });\n      const response = await requestAskingNewGameroom.json();\n      cs.roomId = response.friendlyId;\n      cs.rtdbRoomId = response.longGameRoomId;\n      cs.roomCreator = true;\n      this.setState(cs);\n      if (callback) {\n        callback();\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  },\n\n  async accesToGameRoom(callback?) {\n    const cs = this.getState();\n    const roomId = cs.roomId;\n    const userId = cs.userId;\n    const requestAccesing = await fetch(\n      API_BASE + \"/game-rooms/\" + roomId + \"?userId=\" + userId\n    );\n    const data = await requestAccesing.json();\n    cs.rtdbRoomId = data;\n    cs.roomId = roomId;\n    this.setState(cs);\n    this.listenRTDBData();\n\n    if (callback) {\n      callback();\n    }\n  },\n\n  async playerIsReady(localOrGuest: player, callback?) {\n    //recibe \"playerOne\" o \"playerTwo\"\n    const cs = this.getState();\n    const request = await fetch(API_BASE + \"/start\", {\n      mode: \"cors\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        player: localOrGuest,\n        rtdbRoomId: cs.rtdbRoomId,\n      }),\n    });\n    if (callback) {\n      callback();\n    }\n  },\n\n  async playersChoice(localOrGuest: player, choice: move, callback?) {\n    //recibe \"playerOne\" o \"playerTwo\"\n    const cs = state.getState();\n    const rtdbRoomId = cs.rtdbRoomId;\n\n    const request = await fetch(API_BASE + \"/choice\", {\n      mode: \"cors\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        player: localOrGuest,\n        rtdbRoomId: rtdbRoomId,\n        choice: choice,\n      }),\n    });\n    if (callback) {\n      callback();\n    }\n  },\n\n  async replay(callback?) {\n    const cs = this.getState();\n    const rtdbRoomId = cs.rtdbRoomId;\n    await fetch(API_BASE + \"/replay\", {\n      mode: \"cors\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        rtdbRoomId: rtdbRoomId,\n      }),\n    });\n    if (callback) {\n      callback();\n    }\n  },\n\n  async cleaningReplay(callback?) {\n    const cs = this.getState();\n    const rtdbRoomId = cs.rtdbRoomId;\n    await fetch(API_BASE + \"/clear-replay\", {\n      mode: \"cors\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        rtdbRoomId: rtdbRoomId,\n      }),\n    });\n    if (callback) {\n      callback();\n    }\n  },\n  async growScore(player: player, callback?) {\n    const cs = this.getState();\n    const rtdbRoomId = cs.rtdbRoomId;\n    const score = cs.roomCreator\n      ? cs.rtdbData.playerOne.score\n      : cs.rtdbData.playerTwo.score;\n    await fetch(API_BASE + \"/grow-score\", {\n      mode: \"cors\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        player: player,\n        rtdbRoomId: rtdbRoomId,\n        score: score + 1,\n      }),\n    });\n    if (callback) {\n      callback();\n    }\n  },\n\n  whoWins(localMove: move, guestMove: move, callback) {\n    const cs = this.getState();\n\n    const pOneGanaConTijeras = localMove == \"tijera\" && guestMove == \"papel\";\n    const pOneGanaConPiedra = localMove == \"piedra\" && guestMove == \"tijera\";\n    const pOnelGanaConPapel = localMove == \"papel\" && guestMove == \"piedra\";\n\n    const pTwoGanaConTijeras = localMove == \"papel\" && guestMove == \"tijera\";\n    const pTwoGanaConPapel = localMove == \"piedra\" && guestMove == \"papel\";\n    const pTwoGanaConPiedra = localMove == \"tijera\" && guestMove == \"piedra\";\n\n    const ganaPlayerOne = [\n      pOneGanaConPiedra,\n      pOnelGanaConPapel,\n      pOneGanaConTijeras,\n    ].includes(true);\n\n    const ganaPlayerTwo = [\n      pTwoGanaConTijeras,\n      pTwoGanaConPapel,\n      pTwoGanaConPiedra,\n    ].includes(true);\n\n    const empate = localMove && guestMove;\n    const iAmLocal = cs.roomCreator;\n\n    if (ganaPlayerOne) {\n      if (iAmLocal) {\n        state.growScore(\"playerOne\", () => {\n          state.setState({ ...cs, result: \"ganaste\" });\n          state.listenRTDBData();\n          callback();\n        });\n      } else if (!iAmLocal) {\n        state.setState({ ...cs, result: \"perdiste\" });\n        state.listenRTDBData();\n        callback();\n      }\n    }\n    if (ganaPlayerTwo) {\n      if (!iAmLocal) {\n        state.growScore(\"playerTwo\", () => {\n          state.setState({ ...cs, result: \"ganaste\" });\n          state.listenRTDBData();\n          callback();\n        });\n      } else if (iAmLocal) {\n        state.setState({ ...cs, result: \"perdiste\" });\n        state.listenRTDBData();\n        callback();\n      }\n    }\n    if (empate) {\n      this.setState({ ...cs, result: \"empataste\" });\n      state.listenRTDBData();\n      callback();\n    }\n  },\n};\n\nexport { state };\n","import { Router } from \"@vaadin/router\";\nimport { state } from \"../../state\";\n\nclass AccessRoomPage extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  connectedCallback() {\n    this.addListeners();\n  }\n\n  addListeners() {\n    this.render();\n    const form = this.shadow.querySelector(\".form\") as any;\n    const currentState = state.getState();\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      const target = e.target as any;\n      const roomCode = target.roomcode.value;\n      currentState.roomId = roomCode;\n      currentState.roomCreator = false;\n      state.setState(currentState);\n\n      state.signIn(() => {\n        state.accesToGameRoom(() => {\n          Router.go(\"/game-room\");\n          state.guestPlayer();\n        });\n      });\n    });\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n        <div class=\"container\">\n         <custom-text variant=\"title\">Piedra Papel o Tijera</custom-text>\n         <div>\n         <form class=\"form\">\n             <input type=\"text\" name=\"roomcode\" class=\"code\"></>\n             <button class=\"button\">Ingresar a la sala</button>\n         </form>\n     </div>\n        </div>\n      `;\n    style.innerHTML = `\n      .container{\n        height: 95vh;\n        width: 100%;\n        margin: 0;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-around;\n        align-items: center;\n      }\n      .form{\n        height: 50vh;\n        width: 600px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n      }\n      @media(max-width: 600px){\n        .form{\n          \n          width: 90vw;\n        }\n      }\n      .code{\n        width: 100%;\n        height: 45px;\n        border-radius: 15px;\n        border:none;\n        padding: 7px;\n        text-align: center;\n        box-shadow: 10px 5px 5px black;\n      }\n      .button{\n        width: 103%;\n        height: 60px;\n        background: #006CFC;\n        border: none;\n        border-radius: 15px;\n        margin-top: 20px;\n        color: white;\n        font-size: 20px;\n      }\n    `;\n    this.shadow.appendChild(style);\n  }\n}\n\ncustomElements.define(\"access-page\", AccessRoomPage);\n","import { Router } from \"@vaadin/router\";\nimport { state } from \"../../state\";\n\nclass GameRoomPage extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n        <div class=\"container\">\n         <div class=\"container-room-score\">\n          <custom-marcador></custom-marcador>\n          <room-code></room-code>\n         </div>\n         <div class=\"share-message\">\n          <custom-share-code-message></custom-share-code-message>\n         </div>\n         <custom-text class=\"cuandoEstesListo escondido\">Ya tienes un contricante! Preciona Comenzar cuando estés listo.</custom-text>\n         <custom-button class=\"startGame escondido\">Comenzar!</custom-button>\n         \n        </div>\n      `;\n\n    style.innerHTML = `\n    .container{\n      height: 100vh;\n      width: 100%;\n      margin: 0;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-around;\n      align-items: center;\n    }\n    .container-room-score{\n      width: 90%;\n      margin: 0 auto;\n      display:flex;\n      align-items:center;\n      justify-content: space-between;\n    }\n    .escondido{\n      display:none;\n    }\n    .mostrado{\n      display:inherit;\n    }\n    `;\n    this.shadow.appendChild(style);\n  }\n  beforeClose() {\n    this.render();\n    const cs = state.getState();\n\n    const button = this.shadow.querySelector(\".startGame\") as any;\n    const shareMessage = this.shadow.querySelector(\".share-message\") as any;\n    const bothReady = this.shadow.querySelector(\".cuandoEstesListo\") as any;\n\n    if (cs.rtdbData.playerTwo.nombre !== \"playerTwo\") {\n      shareMessage.classList.toggle(\"escondido\");\n      bothReady.classList.toggle(\"escondido\");\n      bothReady.classList.toggle(\"mostrado\");\n      button.classList.toggle(\"escondido\");\n      button.classList.toggle(\"mostrado\");\n    }\n\n    button.addEventListener(\"click\", () => {\n      //state.listenRTDBDataReplay();\n      Router.go(\"/instructions\");\n    });\n  }\n\n  connectedCallback() {\n    state.subscribe(() => {\n      this.beforeClose();\n    });\n    this.beforeClose();\n  }\n}\n\ncustomElements.define(\"game-room-page\", GameRoomPage);\n","import { state } from \"../../state\";\nimport { Router } from \"@vaadin/router\";\n\nclass ChoosePage extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n      <div class=\"container\">\n          <cuenta-regresiva></cuenta-regresiva>\n          <div class=\"contenedorDeManos\">\n            <game-option variant=\"piedra\" class=\"piedra\"></game-option>\n            <game-option variant=\"papel\" class=\"papel\"></game-option>\n            <game-option variant=\"tijera\" class=\"tijera\"></game-option>\n          </div>\n        </div>\n      `;\n    style.innerHTML = `\n    .container{\n      height: 100vh;\n      width: 100%;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .contenedorDeManos {\n      display: flex;\n    }\n\n    `;\n\n    this.shadow.appendChild(style);\n  }\n  setingChoice() {\n    this.render();\n    const cs = state.getState();\n\n    const tijera = this.shadow.querySelector(\".tijera\") as any;\n    const papel = this.shadow.querySelector(\".papel\") as any;\n    const piedra = this.shadow.querySelector(\".piedra\") as any;\n\n    tijera.addEventListener(\"click\", () => {\n      if (cs.roomCreator) {\n        state.playersChoice(\"playerOne\", \"tijera\", () => {\n          Router.go(\"/waiting\");\n        });\n      } else {\n        state.playersChoice(\"playerTwo\", \"tijera\", () => {\n          Router.go(\"/waiting\");\n        });\n      }\n    });\n\n    papel.addEventListener(\"click\", () => {\n      if (cs.roomCreator) {\n        state.playersChoice(\"playerOne\", \"papel\", () => {\n          Router.go(\"/waiting\");\n        });\n      } else {\n        state.playersChoice(\"playerTwo\", \"papel\", () => {\n          Router.go(\"/waiting\");\n        });\n      }\n    });\n\n    piedra.addEventListener(\"click\", () => {\n      if (cs.roomCreator) {\n        state.playersChoice(\"playerOne\", \"piedra\", () => {\n          Router.go(\"/waiting\");\n        });\n      } else {\n        state.playersChoice(\"playerTwo\", \"piedra\", () => {\n          Router.go(\"/waiting\");\n        });\n      }\n    });\n  }\n  connectedCallback() {\n    this.setingChoice();\n  }\n}\ncustomElements.define(\"choose-room-page\", ChoosePage);\n","import { Router } from \"@vaadin/router\";\nimport { state } from \"../../state\";\n\nclass instructions extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n          <div class=\"contenedor\">\n            <custom-text>\n                Presioná jugar y elegí: piedra, papel o tijera antes de que pasen los 3 segundos.<br>\n                Suerte!\n            </custom-text>\n            <custom-button class=\"play-button\">Jugar!</custom-button>\n          </div>\n        `;\n    style.innerHTML = `\n    .contenedor{\n      height: 100vh;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items:center;\n    }\n    .instructions{\n      font-size: 45px;\n      display: block;\n      height: auto;\n      max-width: 600px;\n      text-align: center;\n      animation: fade .7s ease;\n    }\n\n    @media(max-width:600px){\n      .play-button{\n        margin-top: 20px;\n      }\n    }\n\n    @keyframes fade{\n      0%{\n        opacity: 0;\n      }\n      100%{\n        opacity: 1;\n      }\n    }`;\n    this.shadow.appendChild(style);\n  }\n  userIsReady() {\n    this.render();\n    const cs = state.getState();\n    const playButton = this.shadow.querySelector(\".play-button\") as any;\n\n    playButton.addEventListener(\"click\", () => {\n      if (cs.roomCreator) {\n        state.playerIsReady(\"playerOne\", () => {\n          Router.go(\"/choose-room\");\n        });\n      } else if (!cs.roomCreator) {\n        state.playerIsReady(\"playerTwo\", () => {\n          Router.go(\"/choose-room\");\n        });\n      }\n    });\n  }\n  connectedCallback() {\n    this.userIsReady();\n  }\n}\ncustomElements.define(\"instructions-page\", instructions);\n","import { Router } from \"@vaadin/router\";\nimport { state } from \"../../state\";\n\nclass ComparitionPage extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  render() {\n    this.shadow.innerHTML = `\n    <muestra-jugada></muestra-jugada>\n    `;\n  }\n  connectedCallback() {\n    this.render();\n    const cs = state.getState();\n    setTimeout(() => {\n      state.whoWins(\n        cs.rtdbData.playerOne.choice,\n        cs.rtdbData.playerTwo.choice,\n        () => {\n          Router.go(\"/result\");\n          state.listenRTDBData();\n        }\n      );\n    }, 2000);\n  }\n}\n\ncustomElements.define(\"comparition-page\", ComparitionPage);\n","import { state } from \"../../state\";\nimport { Router } from \"@vaadin/router\";\n\nclass WaitingPage extends HTMLElement {\n  shadow: ShadowRoot;\n  cuentaRegresiva: number = 15;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n            <div class=\"container\">\n              <custom-text>Esperemos a que tu contrincante elija una opcion... \n              Si no elije en los siguientes ${this.cuentaRegresiva} \n              segundos ganas esta partida!</custom-text>\n            </div>\n        `;\n    style.innerHTML = `\n      .container{\n        display: flex;\n        justify-content:center;\n        align-items:center;\n        height: 100vh;\n        width: 100vw;\n      }\n    `;\n    this.shadow.appendChild(style);\n  }\n\n  asksIfTheOtherPlayerChoosed() {\n    const setIN = setInterval(() => {\n      this.render();\n      const cs = state.getState();\n      const dataRealtime = cs.rtdbData;\n\n      const playerOneEligio = dataRealtime.playerOne.choice != \"none\";\n      const playerTwoEligio = dataRealtime.playerTwo.choice != \"none\";\n\n      const playerOneNoEligio = !playerOneEligio;\n      const playerTwoNoEligio = !playerTwoEligio;\n\n      if (\n        (!cs.roomCreator &&\n          this.cuentaRegresiva == 0 &&\n          playerOneNoEligio &&\n          playerTwoEligio) ||\n        (cs.roomCreator &&\n          this.cuentaRegresiva == 0 &&\n          playerOneEligio &&\n          playerTwoNoEligio)\n      ) {\n        clearInterval(setIN);\n        Router.go(\"/result\");\n      } else if (playerOneEligio && playerTwoEligio) {\n        clearInterval(setIN);\n        Router.go(\"/comparition\");\n      }\n      this.cuentaRegresiva--;\n    }, 1000);\n  }\n\n  connectedCallback() {\n    this.asksIfTheOtherPlayerChoosed();\n  }\n}\n\ncustomElements.define(\"waiting-page\", WaitingPage);\n","import { state } from \"../../state\";\nimport { Router } from \"@vaadin/router\";\n\nclass ResultPage extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n    <div class=\"container\">\n      <star-comp></star-comp>\n      <custom-score></custom-score>\n      <custom-button class=\"playAgainButton\">Volver a jugar</custom-button>\n    </div>\n    `;\n    style.innerHTML = `\n      .container{\n        display:flex;\n        flex-direction: column;\n        justify-content:center;\n        align-items:center;\n        width: 100%;\n        height:100vh;\n      }\n    `;\n    this.shadow.appendChild(style);\n  }\n  sync() {\n    this.render();\n    state.listenRTDBData();\n    const playAgainButton = this.shadow.querySelector(\n      \".playAgainButton\"\n    ) as any;\n    playAgainButton.addEventListener(\"click\", () => {\n      state.replay(() => {\n        Router.go(\"/instructions\");\n      });\n    });\n  }\n  connectedCallback() {\n    this.sync();\n  }\n}\n\ncustomElements.define(\"result-room\", ResultPage);\n","class Path extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n      <div class=\"container\">\n        <custom-questionary></custom-questionary>\n      </div>\n    `;\n    style.innerHTML = `\n      .container{\n        height: 100vh;\n        display:flex;\n        justify-content:center;\n        align-items:center;\n      }\n    `;\n    this.shadow.appendChild(style);\n  }\n  connectedCallback() {\n    this.render();\n  }\n}\ncustomElements.define(\"path-page\", Path);\n","class CustomText extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    const variant = this.getAttribute(\"variant\") || \"body\";\n    const div = document.createElement(\"div\");\n    const style = document.createElement(\"style\");\n\n    style.innerHTML = `\n        .title{\n            font-size:80px;\n            font-weight: bold;\n            color: #009048;\n            transition: all 3s ease;\n          }\n          @media (max-width:600px){\n            .title{\n              width: 90%;\n              font-size:70px;\n              margin: 0 auto;\n              text-align: center;\n            }\n          }\n          .body{\n            text-align:center;\n            color: black;\n            font-size: 30px;\n            max-width: 600px;\n            margin-bottom: 20px;\n        }@media (max-width:600px){\n          .body{\n            width: 90%;\n            margin: 0 auto;\n          }\n        }\n      `;\n    div.className = variant;\n    div.textContent = this.textContent;\n    this.shadow.appendChild(div);\n    this.shadow.appendChild(style);\n  }\n  connectedCallback() {\n    this.render();\n  }\n}\ncustomElements.define(\"custom-text\", CustomText);\n","class Button extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n\n    this.shadow.innerHTML = `\n    <button class=\"root\"></button>\n    `;\n\n    const button = this.shadow.querySelector(\".root\") as any;\n    button.textContent = this.textContent || \"ups!\";\n\n    style.innerHTML = `\n      .root{\n        font-size: 18px;\n        border-radius: 4px;\n        padding: 17px 13px;\n        background-color:#006CFC;\n        color:#D8FCFC;\n        min-width: 600px;\n        border: 10px solid #001997;\n        border-radius: 4px;\n        animation: lower .4s ease ;\n        margin:auto;\n      }\n      @media screen and (max-width: 600px){\n        .root{\n          min-width: 90vw;\n          margin:0 5vw;\n        }\n      }\n      @keyframes lower{\n        0%{\n          transform: translateY(100%);\n        }\n        75%{\n          transform: translateY(-10%);\n        }\n        100%{\n          transform: translateY(0%);\n        }\n      }\n      `;\n\n    this.shadow.appendChild(style);\n  }\n  connectedCallback() {\n    this.render();\n  }\n}\n\ncustomElements.define(\"custom-button\", Button);\n","import { state } from \"../state\";\nclass ShowName extends HTMLElement {\n  shadow: ShadowRoot;\n  nombre: string = \"Player Name\";\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    this.shadow.innerHTML = `<p>${this.nombre}</p>`;\n  }\n  syncWithState() {\n    const lastState = state.getState();\n    this.nombre = lastState.nombre;\n    this.render();\n  }\n\n  connectedCallback() {\n    state.subscribe(() => {\n      this.syncWithState();\n    });\n    this.syncWithState();\n  }\n}\n\ncustomElements.define(\"show-name\", ShowName);\n","import { state } from \"../state\";\nclass RoomCode extends HTMLElement {\n  roomId: string = \"0000\";\n  shadow: ShadowRoot;\n\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n\n    this.shadow.innerHTML = `<h3 class=\"code-container\">SALA:${this.roomId}</h3>`;\n\n    style.innerHTML = `\n      .code-container{\n        padding: 15px;\n        background-color:#006CFC;\n        border: 10px solid #001997;\n        border-radius: 4px;\n        color: white;\n        margin-right: 15px;\n        font-family: sans-serif;\n      }\n    `;\n    this.shadow.appendChild(style);\n  }\n\n  syncWithState() {\n    const lastState = state.getState();\n    this.roomId = lastState.roomId;\n    this.render();\n  }\n\n  connectedCallback() {\n    state.subscribe(() => {\n      this.syncWithState();\n    });\n    this.syncWithState();\n  }\n}\n\ncustomElements.define(\"room-code\", RoomCode);\n","import { state } from \"../state\";\nclass Marcador extends HTMLElement {\n  shadow: ShadowRoot;\n  playerOneName: string;\n  playerTwoName: string;\n  playerOneScore: number;\n  playerTwoScore: number;\n\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n        <div class=\"marcador-container\">\n            <div class=\"marcador-el local\">${this.playerOneName}:${this.playerOneScore}</div>\n            <div class=\"marcador-el guest\">${this.playerTwoName}:${this.playerTwoScore}</div>\n        </div>\n        `;\n    style.innerHTML = `\n        .marcador-container{\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            flex-direction:column;\n            height: 10vh;\n            width: auto;\n            margin: 20px;\n        }\n\n        .marcador-el{\n          color: black;\n          font-size: 25px;\n          font-family: sans-serif;\n          text-align:end;\n          width: 100%;;\n        }\n\n    `;\n    this.shadow.appendChild(style);\n  }\n  syncWithState() {\n    const lastState = state.getState();\n    const data = lastState.rtdbData;\n\n    //playerOne name and score\n    this.playerOneName = data.playerOne.nombre;\n    this.playerOneScore = data.playerOne.score;\n\n    //playerOne name and score\n    this.playerTwoName = data.playerTwo.nombre;\n    this.playerTwoScore = data.playerTwo.score;\n\n    this.render();\n  }\n  connectedCallback() {\n    this.syncWithState();\n  }\n}\ncustomElements.define(\"custom-marcador\", Marcador);\n","import { state } from \"../state\";\nclass ShareCodeMessage extends HTMLElement {\n  roomId: string = \"0000\";\n  shadow: ShadowRoot;\n\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n        <div class=\"message-container\">\n          <p>Comparte este codigo con tu contrincante:</p> \n          <h3 class=\"code\">${this.roomId}</h3> \n        </div>\n      `;\n    style.innerHTML = `\n      .message-container{\n        height: 40vh;\n        width: 90vw;\n        display: flex;\n        flex-direction: column;\n        justify-content:center;\n        align-items: center;\n      }\n      p{\n        font-size: 30px;\n      }\n\n      .code{\n        font-size: 70px;\n        color: #006CFC;\n        margin: 50px;\n      }\n    `;\n\n    this.shadow.appendChild(style);\n  }\n  syncWhithState() {\n    this.render();\n    const cs = state.getState();\n    this.roomId = cs.roomId;\n  }\n  connectedCallback() {\n    state.subscribe(() => {\n      this.syncWhithState();\n    });\n    this.syncWhithState();\n  }\n}\ncustomElements.define(\"custom-share-code-message\", ShareCodeMessage);\n","class GameOption extends HTMLElement {\n  imgURL: string;\n  connectedCallback() {\n    this.render();\n  }\n  render() {\n    const imgTijera = require(\"../img/tijera.svg\") as any;\n    const imgPapel = require(\"../img/papel.svg\") as any;\n    const imgPiedra = require(\"../img/piedra.svg\") as any;\n\n    const variant = this.getAttribute(\"variant\");\n    const style = document.createElement(\"style\");\n\n    if (variant == \"tijera\") {\n      this.imgURL = imgTijera;\n    }\n\n    if (variant == \"piedra\") {\n      this.imgURL = imgPiedra;\n    }\n\n    if (variant == \"papel\") {\n      this.imgURL = imgPapel;\n    }\n\n    this.innerHTML = `\n        <div class=\"gameObject\">\n        <img class=\"image\" src=\"${this.imgURL}\">\n        </div>\n      `;\n    style.innerHTML = `\n    .gameObject {\n        width: auto;\n        min-height: 200px;\n        margin: 0 10px;\n        transition: all .2s ease-in;\n      }\n      .image{\n        height: 45vh;\n        width: auto;\n      }\n      @media (max-width: 600px){\n        .image{\n          height: 30vh;\n        }\n      }\n    \n    `;\n    this.appendChild(style);\n  }\n}\n\ncustomElements.define(\"game-option\", GameOption);\n","import { Router } from \"@vaadin/router\";\nimport { state } from \"../state\";\n\nclass Contador extends HTMLElement {\n  shadow: ShadowRoot;\n  cuentaRegresiva: number = 10;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n    <div class=\"contador\"></div>`;\n    style.innerHTML = `\n    .contador{\n        height: 300px;\n        width: 300px;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: black;\n        font-size: 100px;\n        animation: fade .5s linear;\n      }\n      @keyframes fade{\n        0%{\n          transform: translateY(-100%)\n        }\n        100%{\n          transform: translateY(0%)\n        }\n      }\n      `;\n    this.shadow.appendChild(style);\n  }\n  async cuentaAtras() {\n    const setIN = setInterval(() => {\n      this.render();\n      const contador = this.shadow.querySelector(\".contador\") as any;\n      const cs = state.getState();\n\n      const terminoTiempo = this.cuentaRegresiva == 0;\n      const playerOneNoEligio = cs.rtdbData.playerOne.choice == \"none\";\n      const playerTwoNoEligio = cs.rtdbData.playerTwo.choice == \"none\";\n\n      if (terminoTiempo) {\n        clearInterval(setIN);\n        if (playerOneNoEligio && playerTwoNoEligio) {\n          Router.go(\"/instructions\");\n        }\n        if (cs.roomCreator && playerOneNoEligio) {\n          state.growScore(\"playerTwo\", () => {\n            cs.result = \"perdiste\";\n            state.setState(cs);\n            Router.go(\"/result\");\n          });\n        }\n        if (!cs.roomCreator && playerTwoNoEligio) {\n          state.growScore(\"playerOne\", () => {\n            cs.result = \"perdiste\";\n            state.setState(cs);\n            Router.go(\"/result\");\n          });\n        }\n      } else if (!playerOneNoEligio && !playerTwoNoEligio) {\n        clearInterval(setIN);\n      }\n\n      contador.innerHTML = `${this.cuentaRegresiva}`;\n      this.cuentaRegresiva--;\n    }, 1000);\n  }\n  connectedCallback() {\n    this.cuentaAtras();\n  }\n}\n\ncustomElements.define(\"cuenta-regresiva\", Contador);\n","import { state } from \"../state\";\n\nclass MuestraJugada extends HTMLElement {\n  shadow: ShadowRoot;\n  playerOneChoice: string;\n  playerTwoChoice: string;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  render() {\n    const style = document.createElement(\"style\");\n\n    this.shadow.innerHTML = `\n      <div class=\"contenedor\">\n        <game-option class=\"playerOneMove\" variant=${this.playerOneChoice}></game-option>\n        <game-option class=\"playerTwoMove\" variant=${this.playerTwoChoice}></game-option>\n      </div>\n    `;\n\n    style.innerHTML = `\n    .contenedor{\n      height: 70vh;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      \n    }\n    \n    .playerTwoMove{\n        margin: 0 auto;\n        animation: fade .5s linear;\n        transform: scale(1.3);\n        \n    }\n    .playerOneMove{\n        margin: 0 auto;\n        transform: rotate(180deg)\n                   scale(1.3);        \n        animation: fadeInverted .5s linear;\n    }\n\n    @keyframes fade{\n      0%{\n        transform: translateY(100%)\n                   scale(1.3);\n      }\n      100%{\n        transform: translateY(0%)\n                   scale(1.3);\n      }\n    }\n    @keyframes fadeInverted{\n        0%{\n            transform: translateY(-500%)\n                       rotate(180deg)\n                       scale(1.3);\n        }\n        100%{\n            transform: translateY(0%)\n                       rotate(180deg)\n                       scale(1.3);\n        }\n      }\n    `;\n    this.shadow.appendChild(style);\n  }\n  sync() {\n    const cs = state.getState();\n    this.playerOneChoice = cs.rtdbData.playerOne.choice;\n    this.playerTwoChoice = cs.rtdbData.playerTwo.choice;\n    this.render();\n  }\n  connectedCallback() {\n    state.subscribe(() => {\n      this.sync();\n    });\n    this.sync();\n  }\n}\n\ncustomElements.define(\"muestra-jugada\", MuestraJugada);\n","import { state } from \"../state\";\n\nclass ScoreComp extends HTMLElement {\n  shadow: ShadowRoot;\n\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n        <div class=\"score-container\">\n         <custom-text>Score</custom-text>\n         <custom-marcador>Score</custom-marcador>\n        </div>    \n        `;\n    style.innerHTML = `\n        .score-container{\n          width: 580px;\n          margin: 10px auto;\n          background: white;\n          text-align: center;\n          border: 10px solid #001997;\n          border-radius: 4px;\n          display:flex;\n          flex-direction:column;\n          align-items: center;\n        }\n        @media(max-width: 600px){\n          .score-container{\n            width: 86vw;\n          }\n        }\n        `;\n    this.shadow.appendChild(style);\n  }\n\n  connectedCallback() {\n    state.subscribe(() => {\n      this.render();\n    });\n    this.render();\n  }\n}\ncustomElements.define(\"custom-score\", ScoreComp);\n","import { state } from \"../state\";\n\nclass StarComp extends HTMLElement {\n  img: string;\n  shadow: ShadowRoot;\n\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n\n  render() {\n    this.shadow.innerHTML = `\n      <div class=\"scoreCont\">\n        <img class=\"starEl\" src=${this.img}/>\n      </div>\n    `;\n\n    const style = document.createElement(\"style\");\n\n    style.innerHTML = `\n      .starEl{\n        height: 200px;\n        width: auto;\n        animation:lower 3s linear infinite;\n        z-index: 2;\n        background: url(\"../img/ganaste.svg\");\n      }\n     .scoreCont{\n        height: 245px;\n        width: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n      @keyframes lower{\n        0%{\n          transform: translateY(0%);\n        }\n        50%{\n          transform: translateY(5%);\n        }\n        100%{\n          transform: translateY(0%);\n        }\n      }`;\n\n    this.shadow.appendChild(style);\n  }\n  sync() {\n    const ganaste = require(\"../img/ganaste.svg\");\n    const perdiste = require(\"../img/perdiste.svg\");\n    const empataste = require(\"../img/empataste.svg\");\n\n    const lastState = state.getState();\n\n    if (lastState.result == \"perdiste\") this.img = perdiste;\n    if (lastState.result == \"ganaste\") this.img = ganaste;\n    if (lastState.result == \"empataste\") this.img = empataste;\n\n    this.render();\n  }\n  connectedCallback() {\n    state.subscribe(() => {\n      this.sync();\n    });\n    this.sync();\n  }\n}\n\ncustomElements.define(\"star-comp\", StarComp);\n","import { state } from \"../../state\";\nimport { Router } from \"@vaadin/router\";\n\nclass WelcomeForm extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = ` \n\n      <div class=\"form-container\">\n        <form class=\"form\">\n          <div class=\"input-container\">\n            <label class=\"label\">Tu Email</label>\n            <input type=\"text\" name=\"email\" class=\"input\">\n          </div>\n          <div class=\"input-container\">\n            <label class=\"label\">Tu Nombre</label>\n            <input type=\"text\" name=\"nombre\" class=\"input\">\n          </div>\n          <button class=\"form-button\">Comenzar</button> \n        </form>\n      </>\n    `;\n    style.innerHTML = `\n    .form-container{\n      height: 70vh;\n      width: 100%;\n      margin: 0 auto;\n    }\n\n    @media(max-width:600px){\n      .form-container{\n        max-width: 90vw;\n        margin: 0 5vw;\n        overflow: hidden;\n        height: 50vh;\n      }\n    }\n\n    .form{\n      height: 100%;\n      width: 600px;\n      margin: 0;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items:center;\n    } \n    @media(max-width: 600px){\n      .form{\n        width: 90vw;\n      }\n    }\n\n    .input-container{\n      width: 100%;\n      margin: 20px auto 0 auto;\n    }\n\n    .input{\n      width: 99%;\n      height: 35px;\n      color: white;\n      font-size: 20px;\n      background: #006CFC;\n      border:none;\n      border-radius: 4px;\n      text-align: center;\n      margin: 0 auto;\n    }\n\n    @media(max-width: 600px){\n      .input-container{\n        width: 90vw;\n      }\n    }\n\n    label{\n      margin: 10px;\n      font-size: 20px;\n      font-family: sans-serif;\n      \n    }\n    button {\n      font-size: 18px;\n      border-radius: 4px;\n      padding: 17px 13px;\n      background-color: #006CFC;\n      color: #D8FCFC;\n      width: 600px;\n      border-radius: 4px;\n      animation: lower .4s ease;\n      margin: 20px auto 0 auto;\n      border: none;\n      box-shadow: 5px 5px 2px #c7c7c7;\n    }\n    \n    @media(max-width: 600px) {\n      button {\n        width: 90vw;\n      }\n    }\n    \n    @keyframes lower {\n      0% {\n        transform: translateY(100%);\n      }\n    \n      75% {\n        transform: translateY(-10%);\n      }\n    \n      100% {\n        transform: translateY(0%);\n      }\n    }\n    `;\n    this.shadow.appendChild(style);\n  }\n  addListeners() {\n    this.render();\n    const form = this.shadow.querySelector(\".form\") as any;\n    form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      const target = e.target as any;\n      const email = target.email.value;\n      const nombre = target.nombre.value;\n      Router.go(\"/path\");\n      state.setNombreAndEmail(nombre, email);\n      state.createPlayer();\n    });\n  }\n  connectedCallback() {\n    this.addListeners();\n  }\n}\ncustomElements.define(\"welcome-form\", WelcomeForm);\n","import { state } from \"../../state\";\nimport { Router } from \"@vaadin/router\";\n\n\nclass Questinary extends HTMLElement {\n  shadow: ShadowRoot;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  render() {\n    this.shadow.innerHTML = `\n            <div class=\"container\">\n                <custom-button class=\"crear\">Crear una nueva Sala</custom-button>\n                <custom-button class=\"test\">Ingresar a una Sala</custom-button>\n            </div>\n        `;\n    const style = document.createElement(\"style\") as any;\n    style.innerHTML = `\n      .container{\n        display:flex;\n        flex-direction: column;\n        justify-content:center;\n        align-items:center;\n      }\n      custom-button{\n        margin:10px;\n      }\n    `;\n    this.shadow.appendChild(style);\n  }\n  addListeners() {\n    this.render();\n    const crear = this.shadow.querySelector(\".crear\") as any;\n    const probar = this.shadow.querySelector(\".test\") as any;\n\n    probar.addEventListener(\"click\", function () {\n      Router.go(\"/access-room\");\n    });\n\n    crear.addEventListener(\"click\", () => {\n      state.signIn(() => {\n        state.askNewGameRoom(() => {\n          Router.go(\"/game-room\");\n          state.accesToGameRoom();\n        });\n      });\n    });\n  }\n  connectedCallback() {\n    this.addListeners();\n  }\n}\ncustomElements.define(\"custom-questionary\", Questinary);\n","import { state } from \"../../state\";\nimport { Router } from \"@vaadin/router\";\n\nclass WantReplay extends HTMLElement {\n  shadow: ShadowRoot;\n  clasStyle: string;\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: \"open\" });\n  }\n  render() {\n    const style = document.createElement(\"style\");\n    this.shadow.innerHTML = `\n      <div id=\"container\" class=\"${this.clasStyle}\">\n        <custom-text>Tu contrincante quiere volver a jugar</custom-text>\n        <custom-text>... Te animas?</custom-text>\n        <custom-button class=\"aceptar\">Aceptar</custom-button>\n      </div>\n      `;\n    style.innerHTML = `\n      .escondido{\n        display:none;\n      }\n      .mostrado{\n        display:flex;\n        flex-direction:column;\n        justify-content: center;\n        align-items:center;\n        background:black;\n        height:100vh;\n        width:100%;\n        position: absolute;\n        top:0;\n        z-index: 5;\n      }\n    `;\n\n    this.shadow.appendChild(style);\n  }\n  listeners() {\n    const cs = state.getState();\n    if (cs.rtdbData.replay == true) {\n      this.clasStyle = \"mostrado\";\n    } else {\n      this.clasStyle = \"escondido\";\n    }\n    this.render();\n    const button = this.shadow.querySelector(\".aceptar\") as any;\n    button.addEventListener(\"click\", async () => {\n      await state.cleaningReplay(() => {\n        Router.go(\"/instructions\");\n      });\n    });\n  }\n  connectedCallback() {\n    this.listeners();\n  }\n}\ncustomElements.define(\"want-replay\", WantReplay);\n","import \"./router.ts\";\nimport \"./pagesInit\";\nimport \"./componentsInit\";\n\nimport { state } from \"./state\";\n//import { Router } from \"@vaadin/router\";\n\n(function () {\n  if (localStorage.getItem(\"saved-state\")) {\n    state.init();\n    //Router.go(\"/game-room\");\n  } else {\n    state.setState({\n      userId: \"\",\n      roomId: \"\",\n      rtdbRoomId: \"\",\n      roomCreator: \"\",\n      rtdbData: {\n        replay: false,\n        playerOne: {\n          nombre: \"playerOne\",\n          choice: \"none\",\n          start: false,\n          creator: true,\n          score: 0,\n        },\n        playerTwo: {\n          nombre: \"playerTwo\",\n          choice: \"none\",\n          start: false,\n          creator: false,\n          score: 0,\n        },\n      },\n      result: \"\",\n    });\n  }\n})();\n"],"names":["$f9d9d110dea7aeee$var$toArray","objectOrArray","Array","isArray","$f9d9d110dea7aeee$var$log","msg","$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","module","exports","URL","parcelRequire","resolve","import","meta","url","toString","register","JSON","parse","$f9d9d110dea7aeee$var$bundleKeys","$f9d9d110dea7aeee$var$ensureBundle","src","match","$f9d9d110dea7aeee$var$ensureRoute","route","$f9d9d110dea7aeee$var$isString","path","bundle","stringKeys","$f9d9d110dea7aeee$var$isFunction","action","children","$f9d9d110dea7aeee$var$isObject","some","key","join","forEach","redirect","overriddenProp","console","warn","$f9d9d110dea7aeee$var$ensureRoutes","routes","$f9d9d110dea7aeee$var$loadScript","script","document","head","querySelector","createElement","setAttribute","async","Promise","reject","onreadystatechange","onload","e","__dynamicImportLoaded","onerror","parentNode","removeChild","appendChild","$f9d9d110dea7aeee$var$fireRouterEvent","type","detail","window","dispatchEvent","CustomEvent","cancelable","o","f","s","$f9d9d110dea7aeee$var$getNotFoundError","context","error","pathname","code","$f9d9d110dea7aeee$var$notFoundResult","$f9d9d110dea7aeee$var$vaadinRouterGlobalClickHandler","event","defaultPrevented","button","shiftKey","ctrlKey","altKey","metaKey","anchor","target","composedPath","nodeName","toLowerCase","hasAttribute","location","hash","origin","port","protocol","hostname","host","$f9d9d110dea7aeee$var$getAnchorOrigin","search","preventDefault","scrollTo","$f9d9d110dea7aeee$var$CLICK","activate","addEventListener","inactivate","removeEventListener","$f9d9d110dea7aeee$var$vaadinRouterGlobalPopstateHandler","state","test","navigator","userAgent","PopStateEvent","inType","params","createEvent","initEvent","Boolean","bubbles","prototype","Event","$f9d9d110dea7aeee$var$POPSTATE","$f9d9d110dea7aeee$var$pathToRegexp_1","$f9d9d110dea7aeee$var$pathToRegexp","$f9d9d110dea7aeee$var$parse_1","$f9d9d110dea7aeee$var$parse","$f9d9d110dea7aeee$var$compile_1","str","options","$f9d9d110dea7aeee$var$tokensToFunction","$f9d9d110dea7aeee$var$tokensToFunction_1","$f9d9d110dea7aeee$var$tokensToRegExp_1","$f9d9d110dea7aeee$var$tokensToRegExp","$f9d9d110dea7aeee$var$PATH_REGEXP","RegExp","res","tokens","index","defaultDelimiter","delimiter","delimiters","pathEscaped","exec","m","escaped","offset","slice","prev","next","name","capture","group","modifier","k","indexOf","push","partial","undefined","repeat","optional","pattern","prefix","$f9d9d110dea7aeee$var$escapeGroup","$f9d9d110dea7aeee$var$escapeString","substr","matches","i1","data","encode","encodeURIComponent","token","segment","value","TypeError","j","String","replace","$f9d9d110dea7aeee$var$flags","sensitive","strict","start","end","endsWith","concat","map","isEndDelimited","groups","source","$f9d9d110dea7aeee$var$regexpToRegexp","parts","$f9d9d110dea7aeee$var$arrayToRegexp","$f9d9d110dea7aeee$var$stringToRegexp","hasOwnProperty","$f9d9d110dea7aeee$var$hasOwnProperty","$f9d9d110dea7aeee$var$cache","Map","$f9d9d110dea7aeee$var$decodeParam","val","decodeURIComponent","err","$f9d9d110dea7aeee$var$matchRoute","ignoreLeadingSlash","parentKeys","parentParams","childMatches","childIndex","routepath","charAt","routeToSkip","done","__children","exact","cacheKey","regexp","get","pathToRegexp","set","assign","prop","call","split","$f9d9d110dea7aeee$var$matchPath","childRoute","parent","matchedLength","childMatch","$f9d9d110dea7aeee$var$resolveRoute","$f9d9d110dea7aeee$export$8b4c839865b08288","constructor","this","baseUrl","errorHandler","resolveRoute","resolver","root","__synthetic","getRoutes","setRoutes","newRoutes","addRoutes","removeRoutes","pathnameOrContext","__normalizePathname","nextMatches","currentContext","resume","prevResult","parentRoute","$f9d9d110dea7aeee$var$isChildRoute","chain","item","pop","$f9d9d110dea7aeee$var$updateChainForRoute","then","resolution","result","catch","errorMessage","routePath","$f9d9d110dea7aeee$var$generateErrorMessage","DOMException","static","base","__effectiveBaseUrl","__createUrl","baseURI","href","normalizedUrl","cache","$f9d9d110dea7aeee$var$cacheRoutes","routesByName","component","has","$f9d9d110dea7aeee$var$getRouteByName","routeName","$f9d9d110dea7aeee$var$getRoutePath","$f9d9d110dea7aeee$var$generateUrls","router","clear","fullPath","rt","toPath","tokensToFunction","create","stringifyQueryParams","queryParams","query","$f9d9d110dea7aeee$var$triggers","$f9d9d110dea7aeee$var$animate","elem","className","classList","add","getComputedStyle","getPropertyValue","$f9d9d110dea7aeee$var$willAnimate","rect","getBoundingClientRect","size","bottom","top","right","left","cb","listener","$f9d9d110dea7aeee$var$waitForAnimation","remove","removeAttribute","$f9d9d110dea7aeee$var$isResultNotEmpty","$f9d9d110dea7aeee$var$createLocation","redirectFrom","getUrl","userParams","$f9d9d110dea7aeee$var$getPathnameForRouter","$f9d9d110dea7aeee$export$55185c17a0fcbe46","compile","$f9d9d110dea7aeee$var$getMatchedPath","$f9d9d110dea7aeee$var$createRedirect","from","$f9d9d110dea7aeee$var$runCallbackIfPossible","callback","args","thisArg","apply","$f9d9d110dea7aeee$var$amend","amendmentFunction","element","amendmentResult","cancel","$f9d9d110dea7aeee$var$removeDomNodes","nodes","reduce","a","b","outlet","baseElement","baseHref","getAttribute","super","__resolveRoute","triggers1","NavigationTrigger","setTriggers","ready","__lastStartedRenderId","__navigationEventHandler","__onNavigationEvent","bind","setOutlet","subscribe","__createdByRouter","WeakMap","__addedByRouter","callbacks","copy","$f9d9d110dea7aeee$var$copyContextWithoutNext","newChildren","childRoutes","$f9d9d110dea7aeee$var$processNewChildren","commands","__isLatestRender","HTMLElement","race","filter","__ensureOutlet","__outlet","getOutlet","skipRender","__previousContext","__urlForName","render","shouldUpdateHistory","renderId","context1","__renderId","__fullyResolveChain","previousContext","__updateBrowserHistory","__skipAttach","__copyUnchangedElements","__addAppearingContent","animationDone","__animateIfNeeded","__runOnAfterEnterCallbacks","__runOnAfterLeaveCallbacks","__removeDisappearingContent","topOfTheChainContextBeforeRedirects","contextBeforeRedirects","__findComponentContextAfterAllRedirects","contextAfterRedirects","topOfTheChainContextAfterRedirects","isFound","findNextContextIfAny","nextContext","__amendWithOnBeforeCallbacks","context2","$f9d9d110dea7aeee$var$renderElement","__redirect","__redirectCount","stringType","stringify","$f9d9d110dea7aeee$var$logValue","contextWithFullChain","__runOnBeforeCallbacks","amendedContext","newContext","previousChain","newChain","prevent","__divergedChainIndex","Math","min","__isReusableElement","__runOnBeforeLeaveCallbacks","i3","__runOnBeforeEnterCallbacks","i2","chainElement","afterLeaveFunction","beforeEnterFunction","otherElement","localName","redirectData","counter","urlForPath","Node","changeState","history","title","deepestCommonParent","unchangedElement","__removeAppearingContent","__appearingContent","__disappearingContent","parentElement","elementToAdd","targetContext","currentComponent","onAfterLeave","onAfterEnter","to","promises","config","animate","leave","enter","all","unsubscribe","triggers2","newTriggers","trigger","urlForName","$f9d9d110dea7aeee$var$DEV_MODE_CODE_REGEXP","$f9d9d110dea7aeee$var$FlowClients","Vaadin","Flow","clients","$f9d9d110dea7aeee$var$uncommentAndRun","Function","log","$f9d9d110dea7aeee$var$runIfDevelopmentMode","developmentMode","$f9d9d110dea7aeee$var$maybeGatherAndSendStats","localStorage","getItem","client","productionMode","$f9d9d110dea7aeee$var$isFlowProductionMode","$f9d9d110dea7aeee$var$isDevelopmentMode","registrations","is","version","$02052ef9328f59ea$var$Home","shadow","attachShadow","mode","innerHTML","style","connectedCallback","customElements","define","$c38e0f42709c826a$export$588c7fdda06fbb0a","assertion","message","$c38e0f42709c826a$export$a39cad550e7ab28a","$c38e0f42709c826a$var$stringToByteArray$1","out","p","c","charCodeAt","charToByteMapWebSafe_","ENCODED_VALS_BASE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","init_","byteToCharMap","byteToCharMapWebSafe_","byteToCharMap_","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","bytes","pos","c1","fromCharCode","stringToByteArray","c2","u","c3","$c38e0f42709c826a$var$byteArrayToString","decodeStringToByteArray","charToByteMap","charToByteMap_","byte4","ENCODED_VALS","ENCODED_VALS_WEBSAFE","$c38e0f42709c826a$export$e510a73ee562749","utf8Bytes","$c38e0f42709c826a$export$b3b2de96497acc47","$c38e0f42709c826a$export$4b5284a3025a455","$c38e0f42709c826a$export$c62426fdd000a97e","$c38e0f42709c826a$export$6c40052bed430212","$c38e0f42709c826a$export$54e9fb29908872fa","Date","$c38e0f42709c826a$export$85f6557964517f1a","promise","$c38e0f42709c826a$export$c36915b22ce77c19","$c38e0f42709c826a$export$872f8323f01d7ae0","$c38e0f42709c826a$export$5d1d834fbbf8bab7","customData","setPrototypeOf","$c38e0f42709c826a$export$dd24e9cd51226c56","captureStackTrace","$c38e0f42709c826a$export$3fa6e1b18a3b2d40","service","serviceName","errors","fullCode","template","$c38e0f42709c826a$var$PATTERN","_","$c38e0f42709c826a$var$replaceTemplate","fullMessage","$c38e0f42709c826a$export$c5a53ce6a17cf18d","$c38e0f42709c826a$export$fac44ee5b035f737","$c38e0f42709c826a$export$2f872c0f2117be69","header","claims","signature","$c38e0f42709c826a$export$9565ca3d387f8aa0","$c38e0f42709c826a$export$fc970ed23da99565","$c38e0f42709c826a$export$2344b14b097df817","obj","$c38e0f42709c826a$export$e51ae4db7b428f67","$c38e0f42709c826a$export$dd1bc94b04021eeb","$c38e0f42709c826a$export$871de8747c9eaa88","fn","contextObj","$c38e0f42709c826a$export$9cb4719e2e525b7a","aKeys","bKeys","includes","aProp","bProp","$c38e0f42709c826a$var$isObject","k1","thing","$c38e0f42709c826a$export$ac4103b836844853","querystringParams","entries","arrayVal","$a83e7ccd68ca8d4e$export$16fa2f45be04daa8","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setServiceProps","props","container","instances","instancesDeferred","instancesOptions","onInitCallbacks","normalizedIdentifier","deferred","isInitialized","shouldAutoInitialize","normalizeInstanceIdentifier","identifier","_a","$a83e7ccd68ca8d4e$var$isComponentEager","getOrInitializeService","instanceIdentifier","instanceDeferred","instance","delete","services","values","INTERNAL","_delete","opts","isComponentSet","onInit","existingCallbacks","Set","existingInstance","invokeOnInitCallbacks","$45b460d9de9b230f$var$instances","$45b460d9de9b230f$export$243e62d78d3b544d","LogLevel1","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","$45b460d9de9b230f$var$defaultLogLevel","$45b460d9de9b230f$var$ConsoleMethod","$45b460d9de9b230f$var$defaultLogHandler","logType","logLevel","now","toISOString","method","_logLevel","_logHandler","_userLogHandler","$45b460d9de9b230f$var$levelStringToEnum","$e67bf383372d72f4$var$idbProxyableTypes","$e67bf383372d72f4$var$cursorAdvanceMethods","$e67bf383372d72f4$var$cursorRequestMap","$e67bf383372d72f4$var$transactionDoneMap","$e67bf383372d72f4$var$transactionStoreNamesMap","$e67bf383372d72f4$var$transformCache","$e67bf383372d72f4$export$407448d2b89b1813","$e67bf383372d72f4$var$idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","$e67bf383372d72f4$export$efccba1c4a2ef57b","$e67bf383372d72f4$var$wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","$e67bf383372d72f4$export$3b14a55fb2447963","storeNames","tx","sort","$e67bf383372d72f4$var$transformCachableValue","unlisten","complete","$e67bf383372d72f4$var$cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","Proxy","IDBRequest","request","success","$e67bf383372d72f4$var$promisifyRequest","newValue","$da032767b57a4aa4$export$ca0ed41b1a2af7e","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","oldVersion","newVersion","db","$da032767b57a4aa4$var$readMethods","$da032767b57a4aa4$var$writeMethods","$da032767b57a4aa4$var$cachedMethods","$da032767b57a4aa4$var$getMethod","target1","targetFuncName","useIndex","isWrite","storeName","store","shift","oldTraps","$57d436074e210fb5$var$PlatformLoggerServiceImpl","getPlatformInfoString","databaseCompatName","$45b460d9de9b230f$export$efa9a398d6368992","$57d436074e210fb5$var$PLATFORM_LOG_STRING","$57d436074e210fb5$export$b4e3c36c855b14b5","$57d436074e210fb5$export$9566bce3835c0f28","$57d436074e210fb5$export$fa5244b94c62d36a","app","addComponent","$57d436074e210fb5$var$logger","debug","$57d436074e210fb5$export$c930050e7bb63965","componentName","$57d436074e210fb5$export$fa0d6da0f5838f50","name1","heartbeatController","getProvider","getImmediate","triggerHeartbeat","$57d436074e210fb5$var$ERROR_FACTORY","setLogLevelImpl","$57d436074e210fb5$var$FirebaseAppImpl","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","name5","libraryKeyOrName","library","variant","version1","versionMismatch","warning","libraryMismatch","preExist","DB_CHECK_NAME","self","onsuccess","close","deleteDatabase","onupgradeneeded","$cfae44f0dfdf62c0$var$cachedSetTimeout","$cfae44f0dfdf62c0$var$cachedClearTimeout","$cfae44f0dfdf62c0$var$process","$cfae44f0dfdf62c0$exports","$cfae44f0dfdf62c0$var$defaultSetTimout","$cfae44f0dfdf62c0$var$defaultClearTimeout","$cfae44f0dfdf62c0$var$runTimeout","fun","setTimeout","clearTimeout","e1","$cfae44f0dfdf62c0$var$currentQueue","$cfae44f0dfdf62c0$var$queue","$cfae44f0dfdf62c0$var$draining","$cfae44f0dfdf62c0$var$queueIndex","$cfae44f0dfdf62c0$var$cleanUpNextTick","$cfae44f0dfdf62c0$var$drainQueue","timeout","len","run","marker","$cfae44f0dfdf62c0$var$runClearTimeout","$cfae44f0dfdf62c0$var$Item","array","$cfae44f0dfdf62c0$var$noop","nextTick","arguments","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","$da38ac6aa733c404$var$SDK_VERSION","$da38ac6aa733c404$var$DOMStorageWrapper","domStorage_","removeItem","prefixedName_","storedVal","prefix_","$da38ac6aa733c404$var$MemoryStorage","cache_","isInMemoryStorage","$da38ac6aa733c404$var$createStoragefor","domStorageName","domStorage","$da38ac6aa733c404$var$PersistentStorage","$da38ac6aa733c404$var$SessionStorage","$da38ac6aa733c404$var$sha1","$c38e0f42709c826a$export$655666783217a925","sha11","$c38e0f42709c826a$export$c85d589bf4e25fef","digest","sha1Bytes","$da38ac6aa733c404$var$buildLogMessage_","varArgs","arg","$da38ac6aa733c404$var$firstLog_","$da38ac6aa733c404$var$enableLogging$1","logger_","persistent","$c38e0f42709c826a$export$a7a9523472993e97","$da38ac6aa733c404$var$logClient","$da38ac6aa733c404$var$logger","$da38ac6aa733c404$var$log","$da38ac6aa733c404$var$logWrapper","$da38ac6aa733c404$var$isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","$da38ac6aa733c404$var$nameCompare","bAsInt","aAsInt","$da38ac6aa733c404$var$requireKey","$da38ac6aa733c404$var$ObjectToUniqueKey","segsize","dataSegs","substring","$da38ac6aa733c404$var$each","$da38ac6aa733c404$var$doubleToIEEE754String","v","Infinity","abs","pow","floor","LN2","bias","ln","round","bits","reverse","hexByteString","hexByte","parseInt","$da38ac6aa733c404$var$INTEGER_REGEXP_","$da38ac6aa733c404$var$tryParseInt","intVal","$da38ac6aa733c404$var$exceptionGuard","stack","$da38ac6aa733c404$var$warn","$da38ac6aa733c404$var$setTimeoutNonBlocking","time","$da38ac6aa733c404$var$AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","addTokenListener","notifyForInvalidToken","$da38ac6aa733c404$var$FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","error2","addAuthTokenListener","removeAuthTokenListener","$da38ac6aa733c404$var$EmulatorTokenProvider","accessToken","OWNER","$da38ac6aa733c404$var$RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","newHost","isCacheableHost","toURLString","query2","$da38ac6aa733c404$var$repoInfoConnectionURL","repoInfo","connURL","counters_","name2","amount","hashString","$da38ac6aa733c404$var$collections","$da38ac6aa733c404$var$StatsCollection","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","requestNum","toProcess","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","connId","bytesSent","everConnected_","log_","stats_","$da38ac6aa733c404$var$statsManagerGetCollection","urlFn","onMessage","onDisconnect1","curSegmentNum","onDisconnect_","myPacketOrderer","$da38ac6aa733c404$var$PacketReceiver","isClosed_","connectTimeoutTimer_","onClosed_","readyState","wrappedFn","body","called","attachEvent","$da38ac6aa733c404$var$executeWhenDOMReady","scriptTagHolder","$da38ac6aa733c404$var$FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","password","sendNewPolls","urlParams","random","uniqueCallbackIdentifier","$da38ac6aa733c404$var$FORGE_DOMAIN_RE","connectURL","addTag","startLongPoll","addDisconnectPingFrame","$da38ac6aa733c404$var$BrowserPollConnection","forceAllow_","forceDisallow_","Windows","UI","myDisconnFrame","shutdown_","send","dataStr","incrementCounter","base64data","$da38ac6aa733c404$var$splitStringBySize","$da38ac6aa733c404$var$MAX_URL_DATA_SIZE","enqueueSegment","pw","display","bytesReceived","commandCB","onMessageCB","onDisconnect2","onDisconnect","outstandingRequests","pendingSegs","currentSerial","$da38ac6aa733c404$var$LUIDGenerator","myIFrame","createIFrame_","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","onDisconnect3","myID","myPW","newRequest_","d","curDataString","theSeg","seg","ts","theURL","addLongPollTag_","segnum","totalsegs","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","rstate","MozWebSocket","$da38ac6aa733c404$var$WebSocketImpl","WebSocket","$da38ac6aa733c404$var$WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","onDisconnect4","device","headers","platform","proxy","mySock","error3","onclose","onmessage","handleIncomingFrame","error4","oldAndroidRegex","oldAndroidMatch","parseFloat","isOldAndroid","jsonMess","fullMess","frameCount","extractFrameCount_","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","$da38ac6aa733c404$var$TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","$da38ac6aa733c404$var$Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","healthyTimeout_","markConnectionHealthy","healthyTimeoutMS","connectionCount","everConnected","onConnectionLost_","secondaryConn_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","t","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","isHealthy_","proceedWithUpgrade_","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onReset_","$da38ac6aa733c404$var$error","sendPingOnPrimaryIfNecessary_","handshake","h","sessionId","version2","tryStartUpgrade_","startUpgrade_","onDisconnect5","closeConnections_","timestamp","sendData_","reason","$da38ac6aa733c404$var$ServerActions","pathString","onComplete","refreshAppCheckToken","onDisconnectPut","stats","allowedEvents_","listeners_","eventType","validateEventType_","eventData","getInitialEvent","et","$da38ac6aa733c404$var$OnlineMonitor","$da38ac6aa733c404$var$EventEmitter","online_","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","$da38ac6aa733c404$var$newEmptyPath","$da38ac6aa733c404$var$Path","$da38ac6aa733c404$var$pathGetFront","$da38ac6aa733c404$var$pathGetLength","$da38ac6aa733c404$var$pathPopFront","$da38ac6aa733c404$var$pathSlice","begin","pieces","$da38ac6aa733c404$var$pathChild","childPathObj","childPieces","$da38ac6aa733c404$var$pathIsEmpty","$da38ac6aa733c404$var$newRelativePath","outerPath","innerPath","outer","inner","$da38ac6aa733c404$var$pathEquals","other","errorPrefix_","parts_","byteLength_","max","$c38e0f42709c826a$export$9536dc0a75b20bf9","$da38ac6aa733c404$var$validationPathCheckValid","validationPath","$da38ac6aa733c404$var$validationPathToErrorString","$da38ac6aa733c404$var$VisibilityMonitor","hidden","visibilityChange","visible","visible_","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","$da38ac6aa733c404$var$PersistentConnection","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","onResponse","curReqNum","r","query3","initConnection_","_path","q","_queryObject","outstandingGet","get1","sendGet_","listen","query4","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","get2","query5","req","status","warnOnListenWarnings_","removeListen_","query6","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","query7","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectMerge","setMaxNode","MAX_NODE","onDisconnectCancel","response","putInternal","sendPut_","queued","errorReason","reqNum","onListenRevoked_","onSecurityDebugPacket_","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","online","nodeFromJSON","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onDisconnect6","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","error5","delta","serverTimeOffset","cancelSentTransactions_","put","query8","normalizedPathString","map1","statusCode","explanation","queries","clientName","reportStats","currentlyOnline","$da38ac6aa733c404$var$NamedNode","name3","node","name4","compare","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","$da38ac6aa733c404$var$KeyIndex","$da38ac6aa733c404$var$Index","$da38ac6aa733c404$var$__EMPTY_NODE","__EMPTY_NODE","makePost","indexValue","$da38ac6aa733c404$var$KEY_INDEX","$da38ac6aa733c404$var$SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","$da38ac6aa733c404$var$LLRBNode","color","RED","$da38ac6aa733c404$var$SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","n","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","resultGenerator","$da38ac6aa733c404$var$NAME_ONLY_COMPARATOR","priority","priorityNode","isLeafNode","$da38ac6aa733c404$var$MAX_NODE$2","getPriority","$da38ac6aa733c404$var$__childrenNodeConstructor","$da38ac6aa733c404$var$nodeFromJSON$1","$da38ac6aa733c404$var$MAX_NODE$1","$da38ac6aa733c404$var$LeafNode","value_","priorityNode_","lazyHash_","__childrenNodeConstructor","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","$da38ac6aa733c404$var$priorityHashText","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","aPriority","bPriority","indexCmp","compareTo","isDefinedOn","$da38ac6aa733c404$var$LOG_2","$da38ac6aa733c404$var$Base12Num","num","current_","mask","bits_","nextBitIsOne","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","root1","$da38ac6aa733c404$var$_defaultIndexMap","indexes_","indexSet_","Default","$da38ac6aa733c404$var$fallbackObject","$da38ac6aa733c404$var$PRIORITY_INDEX","$da38ac6aa733c404$var$IndexMap","indexKey","sortedMap","indexDefinition","existingChildren","getIterator","Wrap","getNext","sawIndexedValue","newIndex","$da38ac6aa733c404$var$buildChildSet","getCompare","indexName","newIndexes","newIndexSet","addToIndexes","indexedChildren","iter","existingSnap","removeFromIndexes","$da38ac6aa733c404$var$EMPTY_NODE","$da38ac6aa733c404$var$ChildrenNode","children_","indexMap_","$da38ac6aa733c404$var$validatePriorityNode","$da38ac6aa733c404$var$NAME_COMPARATOR","child2","hasChild","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","INTEGER_REGEXP_","childHash","idx","resolveIndex_","predecessor1","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","$da38ac6aa733c404$var$MAX_NODE","withIndex","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","$da38ac6aa733c404$var$nodeFromJSON","json","childData","childrenHavePriority","child3","childSet","sortedChildSet","indexPath_","snap","aChild","extractChild","bChild","name6","valueNode","$da38ac6aa733c404$var$VALUE_INDEX","MAX","name7","$da38ac6aa733c404$var$PUSH_CHARS","lastPushTime","$da38ac6aa733c404$var$changeValue","snapshotNode","$da38ac6aa733c404$var$changeChildAdded","oldSnap","index_","newChild","affectedPath","optChangeAccumulator","isIndexed","oldChild","trackChildChange","$da38ac6aa733c404$var$changeChildRemoved","$da38ac6aa733c404$var$changeChildChanged","updateFullNode","newSnap","indexedFilter_","$da38ac6aa733c404$var$IndexedFilter","startPost_","$da38ac6aa733c404$var$RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","filtered","getIndexedFilter","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","$da38ac6aa733c404$var$LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","hasNext","inRange","getReverseIterator","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","limitSet_","$da38ac6aa733c404$export$7ba287e361c94330","$da38ac6aa733c404$var$queryParamsToRestQueryStringParameters","qs","orderBy","$da38ac6aa733c404$var$PathIndex","$da38ac6aa733c404$var$queryParamsGetQueryObject","viewFrom","$da38ac6aa733c404$var$ReadonlyRestClient","listens_","query9","query10","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","error6","referenceConstructor","query11","query12","error7","refreshAuthToken","xhr","XMLHttpRequest","responseText","$da38ac6aa733c404$var$SnapshotHolder","rootNode_","getNode","newSnapshotNode","$da38ac6aa733c404$var$newSparseSnapshotTree","$da38ac6aa733c404$var$sparseSnapshotTreeRemember","sparseSnapshotTree","$da38ac6aa733c404$var$sparseSnapshotTreeForEachTree","prefixPath","$da38ac6aa733c404$var$sparseSnapshotTreeForEachChild","tree","collection_","last_","stat","newStats","collection","server_","statsToReport_","statsListener_","$da38ac6aa733c404$var$StatsListener","reportStats_","reportedStats","haveStatsToReport","$da38ac6aa733c404$var$OperationType","OperationType1","$da38ac6aa733c404$var$newOperationSourceServerTaggedQuery","fromUser","fromServer","$da38ac6aa733c404$var$AckUserWrite","affectedTree","revert","ACK_USER_WRITE","tagged","subtree","LISTEN_COMPLETE","$da38ac6aa733c404$var$ListenComplete","$da38ac6aa733c404$var$Overwrite","OVERWRITE","operationForChild","MERGE","$da38ac6aa733c404$var$Merge","node_","fullyInitialized_","filtered_","isFiltered","isFullyInitialized","isCompleteForChild","$da38ac6aa733c404$var$EventGenerator","query_","$da38ac6aa733c404$var$eventGeneratorGenerateEventsForType","eventGenerator","events","changes","eventCache","filteredChanges","change","aWrapped","bWrapped","$da38ac6aa733c404$var$eventGeneratorCompareChanges","materializedChange","prevName","$da38ac6aa733c404$var$eventGeneratorMaterializeSingleChange","registration","respondsTo","$da38ac6aa733c404$var$newViewCache","serverCache","$da38ac6aa733c404$var$viewCacheUpdateEventSnap","viewCache","eventSnap","$da38ac6aa733c404$var$CacheNode","$da38ac6aa733c404$var$viewCacheUpdateServerSnap","serverSnap","$da38ac6aa733c404$var$viewCacheGetCompleteEventSnap","$da38ac6aa733c404$var$viewCacheGetCompleteServerSnap","$da38ac6aa733c404$var$emptyChildrenSingleton","$da38ac6aa733c404$var$ImmutableTree","$da38ac6aa733c404$var$stringCompare","$da38ac6aa733c404$var$EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","child5","childExistingPathAndValue","errorPrefixFxn","findRootMostValueAndPath","toSet","errorPrefix","child7","child8","newTree","setTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach","foreach_","writeTree_","$da38ac6aa733c404$var$CompoundWrite","$da38ac6aa733c404$var$compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree1","$da38ac6aa733c404$var$compoundWriteAddWrites","updates","newWrite","$da38ac6aa733c404$var$compoundWriteRemoveWrite","empty","newWriteTree2","$da38ac6aa733c404$var$compoundWriteHasCompleteWrite","$da38ac6aa733c404$var$compoundWriteGetCompleteNode","$da38ac6aa733c404$var$compoundWriteGetCompleteChildren","$da38ac6aa733c404$var$compoundWriteChildCompoundWrite","shadowingNode","$da38ac6aa733c404$var$compoundWriteIsEmpty","$da38ac6aa733c404$var$compoundWriteApply","$da38ac6aa733c404$var$applySubtreeWrite","writeTree","priorityWrite","$da38ac6aa733c404$var$writeTreeChildWrites","$da38ac6aa733c404$var$newWriteTreeRef","$da38ac6aa733c404$var$writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","$da38ac6aa733c404$var$writeTreeRecordContainsPath_","$da38ac6aa733c404$var$pathContains","visibleWrites","$da38ac6aa733c404$var$writeTreeLayerTree_","$da38ac6aa733c404$var$writeTreeDefaultFilter_","lastWriteId","$da38ac6aa733c404$var$writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","child10","deepNode","$da38ac6aa733c404$var$writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","subMerge","writeTreeRef","completeServerChildren","topLevelSet","completeChildren","existingEventSnap","existingServerSnap","childMerge","$da38ac6aa733c404$var$writeTreeRefShadowingWrite","$da38ac6aa733c404$var$writeTreeRefCalcIndexedSlice","completeServerData","toIterate","$da38ac6aa733c404$var$writeTreeRefCalcCompleteChild","existingServerCache","$da38ac6aa733c404$var$writeTreeCalcCompleteChild","$da38ac6aa733c404$var$ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","child","writes_","viewCache_","optCompleteServerCache_","serverNode","child11","$da38ac6aa733c404$var$viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","newViewCache1","filterServerNode","overwrite","$da38ac6aa733c404$var$viewProcessorApplyUserOverwrite","$da38ac6aa733c404$var$viewProcessorApplyServerOverwrite","changedChildren","curViewCache","$da38ac6aa733c404$var$viewProcessorCacheHasChild","$da38ac6aa733c404$var$viewProcessorApplyUserMerge","$da38ac6aa733c404$var$viewProcessorApplyServerMerge","ackUserWrite","$da38ac6aa733c404$var$WriteTreeCompleteChildSource","$da38ac6aa733c404$var$writeTreeRefCalcCompleteEventCache","serverChildren","$da38ac6aa733c404$var$writeTreeRefCalcCompleteEventChildren","filtersNodes","$da38ac6aa733c404$var$viewProcessorRevertUserWrite","ackPath","isCompleteForPath","name8","mergePath","serverCachePath","oldServerNode","newViewCache5","$da38ac6aa733c404$var$viewProcessorGenerateEventCacheAfterServerEvent","$da38ac6aa733c404$var$NO_COMPLETE_CHILD_SOURCE","$da38ac6aa733c404$var$viewProcessorListenComplete","newViewCache2","isLeafOrEmpty","oldCompleteSnap","changePath","completeEventChildren","completeNode","oldEventNode","oldEventSnap","updatedPriority","$da38ac6aa733c404$var$writeTreeRefCalcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newViewCache3","newViewCache4","getCompleteChild","$da38ac6aa733c404$var$pathGetBack","$da38ac6aa733c404$var$pathParent","$da38ac6aa733c404$var$viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","$da38ac6aa733c404$var$View","initialViewCache","eventRegistrations_","indexFilter","processor_","$da38ac6aa733c404$var$newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","$da38ac6aa733c404$var$viewGetCompleteServerCache","view","$da38ac6aa733c404$var$viewIsEmpty","$da38ac6aa733c404$var$viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","$da38ac6aa733c404$var$viewApplyOperation","$da38ac6aa733c404$var$viewGenerateEventsForChanges_","eventRegistrations","moves","indexedValueChanged","$da38ac6aa733c404$var$eventGeneratorGenerateEventsForChanges","$da38ac6aa733c404$var$referenceConstructor$1","$da38ac6aa733c404$var$referenceConstructor","$da38ac6aa733c404$var$SyncPoint","views","$da38ac6aa733c404$var$syncPointApplyOperation","syncPoint","optCompleteServerCache","$da38ac6aa733c404$var$syncPointGetView","query13","serverCacheComplete","eventCacheComplete","$da38ac6aa733c404$var$syncPointAddEventRegistration","query14","initialChanges","$da38ac6aa733c404$var$viewGetInitialEvents","$da38ac6aa733c404$var$syncPointRemoveEventRegistration","query15","removed","hadCompleteView","$da38ac6aa733c404$var$syncPointHasCompleteView","viewQueryId","_repo","$da38ac6aa733c404$var$syncPointGetQueryViews","$da38ac6aa733c404$var$syncPointGetCompleteServerCache","$da38ac6aa733c404$var$syncPointViewForQuery","query16","$da38ac6aa733c404$var$syncPointGetCompleteView","$da38ac6aa733c404$var$syncPointViewExistsForQuery","query17","$da38ac6aa733c404$var$syncTreeNextQueryTag_","$da38ac6aa733c404$var$SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","$da38ac6aa733c404$var$syncTreeApplyUserOverwrite","syncTree","newData","$da38ac6aa733c404$var$syncTreeApplyOperationToSyncPoints_","$da38ac6aa733c404$var$syncTreeAckUserWrite","record","$da38ac6aa733c404$var$writeTreeGetWrite","$da38ac6aa733c404$var$syncTreeApplyServerOverwrite","$da38ac6aa733c404$var$syncTreeRemoveEventRegistration","query18","maybeSyncPoint","removedAndEvents","removingDefault","query19","covered","parentSyncPoint","newViews","$da38ac6aa733c404$var$syncTreeCollectDistinctViewsForSubTree_","newQuery","$da38ac6aa733c404$var$syncTreeCreateListenerForView_","startListening","$da38ac6aa733c404$var$syncTreeQueryForListening_","$da38ac6aa733c404$var$syncTreeTagForQuery_","defaultTag","queryToRemove","tagToRemove","$da38ac6aa733c404$var$syncTreeMakeQueryKey_","stopListening","$da38ac6aa733c404$var$syncTreeRemoveTags_","query20","foreachOnPath","pathToSyncPoint","sp","foundAncestorDefaultView","foreachChild","childSyncPoint","viewAlreadyExists","queryKey","$da38ac6aa733c404$var$syncTreeSetupListener_","$da38ac6aa733c404$var$syncTreeCalcCompleteEventCache","$da38ac6aa733c404$var$syncTreeQueryKeyForTag_","$da38ac6aa733c404$var$syncTreeParseQueryKey_","queryPath","$da38ac6aa733c404$var$syncTreeApplyTaggedOperation_","query1","error1","toUpperCase","child1","last","creatorFunction","$da38ac6aa733c404$var$reporters","changeTree","fromObject","$d0a65cf5d4a50ff3$export$8a7957e57f12f09c","rawConfig","existingApp","newApp","apiKey","authDomain","databaseURL","projectId","$933e8d9a533c1200$export$ca000e230c0caa3e","userId","roomId","rtdbRoomId","roomCreator","rtdbData","init","localData","setState","listenRTDBData","cs","getState","$da38ac6aa733c404$export$ad30f661f41f4d90","$da38ac6aa733c404$export$eff4d24c3ff7876e","snapshot","setNombreAndEmail","nombre","email","newState","setItem","urlForFetch","$933e8d9a533c1200$var$API_BASE","fetchedData","fetch","registrated","rtdbGameRoomId","requestAskingNewGameroom","friendlyId","longGameRoomId","requestAccesing","localOrGuest","player","choice","score","playerOne","playerTwo","whoWins","localMove","guestMove","pTwoGanaConTijeras","pTwoGanaConPapel","pTwoGanaConPiedra","ganaPlayerOne","ganaPlayerTwo","empate","iAmLocal","growScore","$0ce31b9fe4406dcf$var$AccessRoomPage","addListeners","form","currentState","roomCode","roomcode","signIn","accesToGameRoom","go","guestPlayer","$012dd5bbcc53b1f3$var$GameRoomPage","beforeClose","shareMessage","bothReady","toggle","$89cd708295767485$var$ChoosePage","setingChoice","tijera","papel","piedra","playersChoice","$a8f6dca5e0a38c6a$var$instructions","userIsReady","playerIsReady","$9a5abf54eb9a813a$var$ComparitionPage","$f1cd6bc3d3d82e37$var$WaitingPage","cuentaRegresiva","asksIfTheOtherPlayerChoosed","setIN","dataRealtime","playerOneEligio","playerTwoEligio","playerOneNoEligio","playerTwoNoEligio","$bb6221dbc9d7c0d2$var$ResultPage","sync","replay","$4b837c8e6140a183$var$Path","$b856294e9c00dd4c$var$CustomText","div","textContent","$cdd394cc9e939400$var$Button","$5207dd07b2c874e1$var$ShowName","syncWithState","lastState","$3106cd3ef07a7ac0$var$RoomCode","$213f3ea3012a2d32$var$Marcador","playerOneName","playerOneScore","playerTwoName","playerTwoScore","$00a071f08b0f40d1$var$ShareCodeMessage","syncWhithState","$b5da4133362ca3fa$var$GameOption","imgTijera","imgPapel","imgPiedra","imgURL","$52aeac11dfd9c811$var$Contador","contador","terminoTiempo","cuentaAtras","$b3ab55afb6a65be8$var$MuestraJugada","playerOneChoice","playerTwoChoice","$fc375b99300638bf$var$ScoreComp","$cca70477e71e19e8$var$StarComp","img","ganaste","perdiste","empataste","$f4d60341e6850d88$var$WelcomeForm","createPlayer","$e3aa527874ceca4b$var$Questinary","crear","askNewGameRoom","$d01e943ca5066ea7$var$WantReplay","clasStyle","cleaningReplay","creator"],"version":3,"file":"index.3e02a305.js.map"}